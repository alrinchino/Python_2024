{"cells":[{"cell_type":"markdown","source":["# Занятие 6. Коллекции. Списки и кортежи"],"metadata":{"id":"WgLhfDHJwnYi"}},{"cell_type":"markdown","metadata":{"id":"Nj_QgqU-HYM1"},"source":["Большинство программ работает не с отдельными переменными, а с набором переменных. Такой набор называется коллекцией.\n","\n","Коллекция в Python — это объект, хранящий набор значений одного или различных типов, позволяющий обращаться к этим значениям, а также применять специальные функции и методы, зависящие от типа коллекции."]},{"cell_type":"markdown","metadata":{"id":"9Jguj5lcHYM1"},"source":["Коллекции:\n","1. Последовательности (`sequences`):\n","    - Изменяемые (mutable):\n","      - Список `list`\n","    - Неизменяемые (immutable):\n","      - Строка `str`\n","      - Кортеж `tuple`\n","2. Множества:\n","    - Изменяемые (mutable):\n","      - Множество `set`\n","    - Неизменяемые (immutable):\n","      - Неизменное множество `frozenset`\n","3. Отображения (mappings)\n","    - Словарь (`dict`)\n","\n","Коллекция – модель, абстрактное понятие.\n","\n","`list`, `str`, `tuple` и т.д. – типы данных.\n","\n","Например, коллекция \"Изменяемая последовательность\" в `Python` реализуется типом данных `list`. А коллекция \"Изменяемое множество\" в `Python` реализуется типом данных `set`.\n","\n","У каждого типа данных есть свои __методы__."]},{"cell_type":"markdown","source":["![Python](https://habrastorage.org/r/w1560/files/50a/6c7/bfe/50a6c7bfe2b04a358a8798a084b6af91.png)\n","\n","![Python](https://habrastorage.org/r/w1560/files/b79/598/4a8/b795984a80064f7a9ca54ef3a06d94a1.png)"],"metadata":{"id":"S_0_hLPm-gGw"}},{"cell_type":"markdown","source":["Пояснения терминологии:\n","\n","**Индексированность** – каждый элемент коллекции имеет свой порядковый номер — индекс. Это позволяет обращаться к элементу по его порядковому индексу, проводить слайсинг («нарезку») — брать часть коллекции выбирая исходя из их индекса. Детально эти вопросы будут рассмотрены в дальнейшем в отдельной статье.\n","\n","**Уникальность** – каждый элемент коллекции может встречаться в ней только один раз. Это порождает требование неизменности используемых типов данных для каждого элемента, например, таким элементом не может быть список.\n","\n","**Изменяемость** коллекции — позволяет добавлять в коллекцию новых членов или удалять их после создания коллекции."],"metadata":{"id":"5ZN-psnP_7Xf"}},{"cell_type":"markdown","metadata":{"id":"_40qeQ8TiZRn"},"source":["# Списки (list) и кортежи (tuple). Основные операции"]},{"cell_type":"markdown","source":["Раньше мы сталкивались с задачей обработки элементов последовательности, например, вычисляя наибольший элемент последовательности. Но при этом мы не сохраняли всю последовательность в памяти компьютера. Однако, во многих задачах нужно именно сохранять всю последовательность, например, если бы нам требовалось вывести все элементы последовательности в возрастающем порядке (“отсортировать последовательность”).\n","\n","Для хранения таких данных можно использовать структуру данных, называемую в Питоне список (в большинстве же языков программирования используется другой термин “массив”). Список представляет собой последовательность элементов, пронумерованных от 0, как символы в строке. Список можно задать перечислением элементов списка в квадратных скобках."],"metadata":{"id":"Z8T_GZ_kw6On"}},{"cell_type":"code","source":["list = [1, 2, 3, 'four', 'five, six', 7 > 8, 8 < 9, True, False]\n","print(list)\n","type(list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kmk6NfpXxA8g","executionInfo":{"status":"ok","timestamp":1728133798657,"user_tz":-180,"elapsed":275,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"a5d4ea0d-bd17-4162-e72c-294af4731f12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 'four', 'five, six', False, True, True, False]\n"]},{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["Этот тип данных очень похож на list, имеет ту же структуру, но отличается тем, что **он неизменяемый**.\n","\n","Это нужно, например, чтобы `tuple` мог выступать в качестве ключей словаря (о них ниже).  Список в качестве ключей словаря выступать не может.\n","\n","Кортеж можно задать перечислением элементов в круглых скобках."],"metadata":{"id":"ujo3_JRnyzRq"}},{"cell_type":"code","source":["tuple = (1, 2, 3, 'four', 'five, six', 7 > 8, 8 < 9, True, False)\n","print(tuple)\n","type(tuple)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S37J0fbgy71R","executionInfo":{"status":"ok","timestamp":1728133806539,"user_tz":-180,"elapsed":278,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"ad893113-1d84-4eac-f2d4-b02e3af2e73d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 2, 3, 'four', 'five, six', False, True, True, False)\n"]},{"output_type":"execute_result","data":{"text/plain":["tuple"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["Как и list, кортежи можно складывать и работает сложение так же, как в list\n","\n","Вообще, с кортежами можно делать все, что можно делать с list, если это не изменяет кортеж."],"metadata":{"id":"040QL1NrahsA"}},{"cell_type":"markdown","source":["## Отличие списков (list) и кортежей (tuple)"],"metadata":{"id":"aKprmnj8WNln"}},{"cell_type":"code","source":["list = ['i', 'cannot', 'be', 'modified']\n","list[1] = 'can'\n","print(list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRFFz2mB2FGz","executionInfo":{"status":"ok","timestamp":1728133883030,"user_tz":-180,"elapsed":269,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"c27f4103-fae5-4124-a26a-1e5433d38d95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['i', 'can', 'be', 'modified']\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J-Q4s7bwiZRn","outputId":"9b906f4f-f94e-4217-8175-534d8f4dddc5","colab":{"base_uri":"https://localhost:8080/","height":185},"executionInfo":{"status":"error","timestamp":1728133897666,"user_tz":-180,"elapsed":289,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}}},"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'tuple' object does not support item assignment","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-64ce266638ca>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'i'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'cannot'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'be'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'modified'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mt\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'can'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}],"source":["t = ('i', 'cannot', 'be', 'modified')\n","t[1] = 'can'\n","print(t)"]},{"cell_type":"markdown","source":["## Основные методы: append, expend и другие"],"metadata":{"id":"cEwgKftrxJiq"}},{"cell_type":"code","source":["# Создадим список чисел в десятичной записи числа пи и добавим в конец число 5\n","pi = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\n","\n","pi.append(5) # Метод list.append(item) добавляет в конец нашего списка новый элемент item, здесь - число 5\n","print(pi)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eOPd4zgl2xtc","executionInfo":{"status":"ok","timestamp":1728134066134,"user_tz":-180,"elapsed":307,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"7da30cea-5556-4570-db4f-eec3ad31e453"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n"]}]},{"cell_type":"code","source":["e = [2, 7]\n","e_1 = [1828, 1825, 45, 90, 45]\n","e.append(e_1)\n","print(e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A7NNlb1a37Rw","executionInfo":{"status":"ok","timestamp":1728134346297,"user_tz":-180,"elapsed":304,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"b3232f38-90d5-4e24-857c-39f3912d3037"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 7, [1828, 1825, 45, 90, 45]]\n"]}]},{"cell_type":"markdown","source":["К сожалению, с помощью append() добавить по отдельности 1828, 1825, 45, 90, 45 нельзя, потому что метод принимает только один аргумент.\n","\n","e.append(1828, 1825, 45, 90, 45) вызовет ошибку.\n","\n","К счастью, есть метод extend(), который позволяет добавить одновременно несколько элементов."],"metadata":{"id":"TfxqSQvZ1nW9"}},{"cell_type":"code","source":["# extend() принимает в качестве параметра итерируемый объект и объединяет его со списком\n","pi = [3, 1, 4, 1, 5, 9]\n","pi.extend([2, 6, 5, 3])\n","print(pi)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7zdLwbxw2ajv","executionInfo":{"status":"ok","timestamp":1728134700205,"user_tz":-180,"elapsed":267,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"0f395ec5-db86-4fee-ada4-2ff0306256c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\n"]}]},{"cell_type":"markdown","source":["Обратите внимание: строки, которые передаются в extend(), превращаются в списки символов и добавляются посимвольно."],"metadata":{"id":"qSVI1eli24Xo"}},{"cell_type":"markdown","source":["**Как ещё можно добавить элементы в список?**\n","\n","Оператор +. Он напоминает обычный математический оператор, но со списками действует как функция extend():"],"metadata":{"id":"wuClrqkV3IYQ"}},{"cell_type":"code","source":["a = [2, 3]\n","b = [1, 4]\n","a += b\n","\n","print(a)\n","[2, 3, 1, 4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cMonoXz_3ReP","executionInfo":{"status":"ok","timestamp":1728134850103,"user_tz":-180,"elapsed":266,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"0ae90196-afa1-4c5a-ebab-5fdf7e95a83d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3, 1, 4]\n"]},{"output_type":"execute_result","data":{"text/plain":["[2, 3, 1, 4]"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["Ещё один способ добавить элементы в список — нестандартно использовать индексацию. Выглядит это так:"],"metadata":{"id":"i2rSDbC03aE4"}},{"cell_type":"code","source":["a = [2, 3]\n","b = [1, 4]\n","a[len(a):] = b\n","\n","print(a)\n","[2, 3, 1, 4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HpunVtXN3cfn","executionInfo":{"status":"ok","timestamp":1728134895003,"user_tz":-180,"elapsed":288,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"fa7fdb03-d7bf-4d06-ea9a-cec1c44e782a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3, 1, 4]\n"]},{"output_type":"execute_result","data":{"text/plain":["[2, 3, 1, 4]"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Метод insert(a, b) вставляет элемент b в позицию с индексом a в наш список, вдвигая вправо оставшиеся элементы\n","spisok.insert(1, 'two')\n","print(spisok)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OOsu-Vog4J8M","executionInfo":{"status":"ok","timestamp":1728118324561,"user_tz":-180,"elapsed":359,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"83283bb1-09a8-4ca8-b0c2-d4be93f0c26d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 'two', 1, 7, 5, 7, 5, 3, 7, 1, 8]\n"]}]},{"cell_type":"code","source":["# Вот так можно удалить элемент по индексу\n","i = 4\n","del spisok[i]\n","print(spisok)"],"metadata":{"id":"CY-s9-G93umw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Метод remove(v) удаляет из списка элемент со значением v (если v несколько - первое слева)\n","spisok.remove('two')\n","print(spisok)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"40cRBEjU26TC","executionInfo":{"status":"ok","timestamp":1728118403096,"user_tz":-180,"elapsed":569,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"3e646773-43dc-41a3-ba41-da4cfb301b98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 1, 7, 5, 7, 5, 3, 7, 1, 8]\n"]}]},{"cell_type":"code","source":["# Метод count(v) возвращает число равных v элементов в списке\n","sevens = spisok.count(7)\n","print(sevens)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JY11u6uf4qsN","executionInfo":{"status":"ok","timestamp":1728118455958,"user_tz":-180,"elapsed":642,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"54aceda6-5604-4257-baaa-1ce178ef62a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rU3yc3uliZRp","outputId":"2ef47881-c3b2-49a2-93b8-a09057563351","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728136195689,"user_tz":-180,"elapsed":265,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","[3, 4, 1, 5, 9]\n","9\n","[3, 4, 1, 5]\n"]}],"source":["# Метод pop([i]) удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент\n","spisok = [3, 1, 4, 1, 5, 9]\n","print(spisok.pop(1))\n","print(spisok)\n","print(spisok.pop())\n","print(spisok)"]},{"cell_type":"code","source":["# reverse() разворачивает список\n","spisok = [1, 2, 3]\n","spisok.reverse()\n","print(spisok)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LOsVTstC6Y0o","executionInfo":{"status":"ok","timestamp":1728135723192,"user_tz":-180,"elapsed":287,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"5652aa64-88cc-4416-9b3a-53ea340b2b2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 2, 1]\n"]}]},{"cell_type":"code","source":["# copy - поверхностная копия списка\n","# Для создания глубокой копии используйте метод deepcopy из модуля copy\n","spisok = [1, 2, 3]\n","list.copy()\n","print(spisok)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hNGNCQQ16GtJ","executionInfo":{"status":"ok","timestamp":1728135853403,"user_tz":-180,"elapsed":293,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"1c6c11c9-2688-44bb-d6fe-19ea1c773edd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3]\n"]}]},{"cell_type":"code","source":["# clear очищает список\n","spisok = [1, 2, 3]\n","spisok.clear()\n","print(spisok)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LE0HC2G46zOS","executionInfo":{"status":"ok","timestamp":1728135817012,"user_tz":-180,"elapsed":294,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"fbe498e6-049c-462c-d92c-77372aacb695"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n"]}]},{"cell_type":"markdown","source":["## Создание списков\n","\n","Рассмотрим несколько способов создания и считывания списков. Прежде всего, можно создать пустой список (не содержащий элементов, длины 0), а в конец списка можно добавлять элементы при помощи метода append.\n","\n","Например, пусть программа получает на вход количество элементов в списке n, а потом n элементов списка по одному в отдельной строке. Вот пример входных данных в таком формате:"],"metadata":{"id":"SXhM-xE0x2S3"}},{"cell_type":"code","source":["5\n","1809\n","1854\n","1860\n","1891\n","1925"],"metadata":{"id":"QjElRNauyEne"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = []\n","n = int(input())\n","for i in range(n): # создаёт список чисел [0, 1, 2, ..., n-1]\n","  a.append(int(input()))\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y8Mt62jL5EYQ","executionInfo":{"status":"ok","timestamp":1728118705552,"user_tz":-180,"elapsed":8234,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"8e81f4ff-7675-4b0f-d0a7-fb5cb2caea0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","1\n","2\n","3\n","[1, 2, 3]\n"]}]},{"cell_type":"markdown","source":["В этом случае организовать считывание списка можно так:"],"metadata":{"id":"S-9hR1WjyFrP"}},{"cell_type":"code","source":["a = []  # заводим пустой список\n","n = int(input())  # считываем количество элемент в списке\n","for i in range(n):\n","    new_element = int(input())  # считываем очередной элемент\n","    a.append(new_element)  # добавляем его в список\n","    # последние две строки можно было заменить одной:\n","    # a.append(int(input()))\n","print(a)"],"metadata":{"id":"JGMXGbt9yKlL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["В этом примере создается пустой список, далее считывается количество элементов в списке, затем по одному считываются элементы списка и добавляются в его конец. То же самое можно записать, сэкономив переменную n:"],"metadata":{"id":"BOXjoqeWyiM_"}},{"cell_type":"code","source":["a = []\n","for i in range(int(input())):\n","    a.append(int(input()))\n","print(a)"],"metadata":{"id":"hVYhezTzylnw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Функции для работы со списками"],"metadata":{"id":"yAt8ZSqCxWfn"}},{"cell_type":"markdown","source":["Для списков целиком определены следующие операции: конкатенация списков (сложение списков, т. е. приписывание к одному списку другого) и повторение списков (умножение списка на число). Например:"],"metadata":{"id":"toZ7FX6kyqT4"}},{"cell_type":"code","source":["a = [1, 2, 3]\n","b = [4, 5]\n","print(a + b)\n","print(b * 3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GL3RQcWxytC_","executionInfo":{"status":"ok","timestamp":1728119186314,"user_tz":-180,"elapsed":339,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"57a41e54-fc95-4f5d-bd24-becf0e6a27c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5]\n","[4, 5, 4, 5, 4, 5]\n"]}]},{"cell_type":"markdown","source":["В результате список c будет равен [1, 2, 3, 4, 5], а список d будет равен [4, 5, 4, 5, 4, 5]. Это позволяет по-другому организовать процесс считывания списков: сначала считать размер списка и создать список из нужного числа элементов, затем организовать цикл по переменной i начиная с числа 0 и внутри цикла считывается i-й элемент списка:"],"metadata":{"id":"Yj8CwI1Fyvmi"}},{"cell_type":"code","source":["a = [0] * int(input())\n","print(a)\n","for i in range(len(a)):\n","    a[i] = int(input())\n","\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V8VPHg6uyx04","executionInfo":{"status":"ok","timestamp":1728119311575,"user_tz":-180,"elapsed":17134,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"169605f9-55c8-4724-8e79-4f0a9cc2e83b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n","[0, 0, 0, 0]\n","1\n","2\n","3\n","4\n","[1, 2, 3, 4]\n"]}]},{"cell_type":"code","source":["# Оператор связывания не создаёт копии контейнеров!\n","\n","c = [1, 1, 1]\n","a = [c] * 3\n","b = c * 3\n","print(a)\n","print(b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9TmKwZSUyz7f","executionInfo":{"status":"ok","timestamp":1728119393343,"user_tz":-180,"elapsed":352,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"9be88111-5501-4712-c86d-da6aaa56ab08"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n","[1, 1, 1, 1, 1, 1, 1, 1, 1]\n"]}]},{"cell_type":"code","source":["c[0] = 0\n","a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ydnS5Jdc8dSG","executionInfo":{"status":"ok","timestamp":1728119446017,"user_tz":-180,"elapsed":4,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"7ce1e095-9ce0-4c4c-991a-9654dd981d51"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[0, 1, 1], [0, 1, 1], [0, 1, 1]]"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["a[0][0] = 2\n","print(a)\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"af7h1hPa8I6g","executionInfo":{"status":"ok","timestamp":1728119481339,"user_tz":-180,"elapsed":582,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"164717f8-4524-4db1-eefb-befc6c0a86dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[2, 1, 1], [2, 1, 1], [2, 1, 1]]\n","[2, 1, 1]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l5NCTp12iZRp","outputId":"f37a97c0-ba5d-4fc5-b11c-023e2aff9ba5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728119570500,"user_tz":-180,"elapsed":480,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["9\n","39\n","7\n","1\n"]}],"source":["spisok = [1, 3, 5, 7, 7, 7, 5, 3, 1]\n","\n","print(len(spisok))\n","print(sum(spisok))\n","print(max(spisok)) # Наибольший элемент списка\n","print(min(spisok)) # Наименьший элемент списка"]},{"cell_type":"markdown","source":["## Поиск в списках"],"metadata":{"id":"0I7VEWM70iyx"}},{"cell_type":"code","source":["spisok = [1, 3, 5, 7, 7, 7, 5, 3, 1]\n","x = 7\n","print(x in spisok)\t    # Проверить, содержится ли элемент в списке. Возвращает True или False\n","print(x not in spisok)\t# То же самое, что not(x in A)\n","print(spisok.index(x))\t        # Индекс первого вхождения элемента x в список, при его отсутствии генерирует исключение ValueError\n","print(spisok.count(x))\t        # Количество вхождений элемента x в список"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NepdWZA40lqv","executionInfo":{"status":"ok","timestamp":1728119695087,"user_tz":-180,"elapsed":470,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"76168480-c1ce-41cb-aa1c-f35d8a359728"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n","3\n","3\n"]}]},{"cell_type":"markdown","source":[".count() — метод подсчета определенных элементов для неуникальных коллекций (строка, список, кортеж), возвращает сколько раз элемент встречается в коллекции."],"metadata":{"id":"K0LGbg80AtAX"}},{"cell_type":"code","source":["my_list = [1, 2, 2, 2, 2, 3]\n","print(my_list.count(2))     # 4 экземпляра элемента равного 2\n","print(my_list.count(5))     # 0 - то есть такого элемента в коллекции нет"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J2eiiZrMAwky","executionInfo":{"status":"ok","timestamp":1728372223794,"user_tz":-180,"elapsed":288,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"6920e263-4001-4dc3-8ac9-04a4cf630978"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n","0\n"]}]},{"cell_type":"markdown","source":["## Сортировка списков"],"metadata":{"id":"4QkUZR6Z0T6y"}},{"cell_type":"code","source":["spisok = [1, 3, 5, 7, 7, 7, 5, 3, 1]\n","spisok.sort() # Сортируем список\n","print(spisok)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cEgNwa4V43wq","executionInfo":{"status":"ok","timestamp":1728119724393,"user_tz":-180,"elapsed":4,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"53e138ee-4dfa-428c-b285-1927af85002d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 1, 3, 3, 5, 5, 7, 7, 7]\n"]}]},{"cell_type":"code","source":["# В отличие от list.sort(), sorted() не меняет исходный список, а создаёт копию\n","\n","spisok = [1, 3, 5, 7, 7, 7, 5, 3, 1]\n","\n","sorted_spisok = sorted(spisok)\n","print(spisok)\n","print(sorted_spisok)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pQXL6nPE0X4B","executionInfo":{"status":"ok","timestamp":1728119768720,"user_tz":-180,"elapsed":538,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"a0c1f7c4-2027-4157-a393-0856056c8745"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 3, 5, 7, 7, 7, 5, 3, 1]\n","[1, 1, 3, 3, 5, 5, 7, 7, 7]\n"]}]},{"cell_type":"markdown","source":["## Срезы (слайсы, слайсинг)"],"metadata":{"id":"vkANFzrhxGJg"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"gFalbcRPiZRo","outputId":"564313ac-804b-4c30-9bee-6cd6d55cfec7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728119879007,"user_tz":-180,"elapsed":507,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["['Rabbit', 'Bear', 'Fox', 'Turtle']\n","['Bear', 'Fox']\n","['Rabbit', 'Bear']\n","['Turtle']\n","Turtle\n","['Rabbit', 'Bear', 'Fox']\n","['Rabbit', 'Fox']\n","['Turtle', 'Fox', 'Bear', 'Rabbit']\n"]}],"source":["#срезы (slices)\n","tea_party = ['Rabbit', 'Bear', 'Fox', 'Turtle']\n","\n","#tea_party[a:b:s]\n","print(tea_party[:]) # Если нет ни a, ни b - выводится список целиком\n","print(tea_party[1:3]) # а включительно, b НЕ включительно\n","print(tea_party[:2])\n","print(tea_party[3:])\n","print(tea_party[-1]) # Последний элемент списка\n","print(tea_party[:-1]) # Все элементы списка, кроме последнего\n","print(tea_party[0:5:2]) # а ещё можно задать шаг прохода s - в данном случае элементы выводятся \"через один\"\n","print(tea_party[::-1]) # а если задать шаг равным -1, список можно развернуть!"]},{"cell_type":"markdown","source":["![](https://habrastorage.org/files/ef4/f9e/a20/ef4f9ea203604aadb56748e7305def0e.png)"],"metadata":{"id":"1g_t5E1JBIu_"}},{"cell_type":"code","source":["col = 'abcdefg'\n","print(col[:])       # abcdefg\n","print(col[::-1])    # gfedcba\n","print(col[::2])     # aceg\n","print(col[1::2])    # bdf\n","print(col[:1])      # a\n","print(col[-1:])     # g\n","print(col[3:4])     # d\n","print(col[-3:])     # efg\n","print(col[-3:1:-1]) # edc\n","print(col[2:5])     # cde"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gUF5mQ4yBW6f","executionInfo":{"status":"ok","timestamp":1728372380072,"user_tz":-180,"elapsed":335,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"3fc85d52-bbe7-469c-8b4d-38aad2cc21ef"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["abcdefg\n","gfedcba\n","aceg\n","bdf\n","a\n","g\n","d\n","efg\n","edc\n","cde\n"]}]},{"cell_type":"markdown","source":["### Изменение списка срезом"],"metadata":{"id":"CohiwIDBBrn4"}},{"cell_type":"markdown","source":["Даже если хотим добавить один элемент, необходимо передавать итерируемый объект, иначе будет ошибка TypeError: can only assign an iterable\n"],"metadata":{"id":"zGFAuH8YB4_G"}},{"cell_type":"code","source":["my_list = [1, 2, 3, 4, 5]\n","# my_list[1:2] = 20     # TypeError: can only assign an iterable\n","my_list[1:2] = [20]     # Вот теперь все работает\n","print(my_list)          # [1, 20, 3, 4, 5]"],"metadata":{"id":"zt82Tkw-B7PW"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pgINeB_iZRo","outputId":"6469f2ee-0710-418e-f679-4419dee03d75"},"outputs":[{"name":"stdout","output_type":"stream","text":["140518043403664\n","['Rabbit', 'Bear', 'Fox', 'Turtle']\n","140518043630720\n","['Rabbit', 'Cat', 'Whale', 'Turtle']\n","140518043630720\n"]}],"source":["print(id(tea_party))\n","tea_party_list = list(tea_party)\n","\n","print(tea_party_list)\n","print(id(tea_party_list))\n","\n","tea_party_list[1:3] = ['Cat','Whale']\n","\n","print(tea_party_list)\n","print(id(tea_party_list))"]},{"cell_type":"markdown","source":["Для вставки одиночных элементов можно использовать срез, код примеров есть ниже, но делать так не рекомендую, так как такой синтаксис хуже читать. Лучше использовать методы списка .append() и .insert():"],"metadata":{"id":"rfRRTyPQCB_f"}},{"cell_type":"code","source":["my_list = [1, 2, 3, 4, 5]\n","my_list[5:] = [6]      # вставляем в конец — лучше использовать .append(6)\n","print(my_list)         # [1, 2, 3, 4, 5, 6]\n","my_list[0:0] = [0]     # вставляем в начало — лучше использовать .insert(0, 0)\n","print(my_list)         # [0, 1, 2, 3, 4, 5, 6]\n","my_list[3:3] = [25]    # вставляем между элементами — лучше использовать .insert(3, 25)\n","print(my_list)         # [0, 1, 2, 25, 3, 4, 5, 6]"],"metadata":{"id":"N8911QOoCEVX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Можно менять части последовательности — это применение выглядит наиболее интересным, так как решает задачу просто и наглядно."],"metadata":{"id":"_1YiWrVfCG9m"}},{"cell_type":"code","source":["my_list = [1, 2, 3, 4, 5]\n","my_list[1:3] = [20, 30]\n","print(my_list)          # [1, 20, 30, 4, 5]\n","my_list[1:3] = [0]      # нет проблем заменить два элемента на один\n","print(my_list)          # [1, 0, 4, 5]\n","my_list[2:] = [40, 50, 60]   # или два элемента на три\n","print(my_list)               # [1, 0, 40, 50, 60]"],"metadata":{"id":"fvg3_Pk9CJk2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Можно просто удалить часть последовательности:"],"metadata":{"id":"Iy7WHxdCCL8V"}},{"cell_type":"code","source":["my_list = [1, 2, 3, 4, 5]\n","my_list[:2] = []    # или del my_list[:2]\n","print(my_list)      # [3, 4, 5]"],"metadata":{"id":"zcR-mfRPCP7Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nRH1cXrPiZRp","outputId":"03a0997c-5a5a-4a51-9a05-e0111dc7e02e"},"outputs":[{"data":{"text/plain":["True"]},"execution_count":23,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["False"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["#Копирование через срезы\n","\n","tea_party_not_so_copy = tea_party_list\n","\n","tea_party_not_so_copy is tea_party_list\n","\n","tea_party_copy = tea_party_list[:]\n","\n","tea_party_copy is tea_party_list\n"]},{"cell_type":"markdown","source":["#### Выход за границы индекса\n","\n","Обращение по индексу по сути является частным случаем среза, когда мы обращаемся только к одному элементу, а не диапазону. Но есть очень важное отличие в обработке ситуации с отсутствующим элементом с искомым индексом.\n","\n","Обращение к несуществующему индексу коллекции вызывает ошибку:"],"metadata":{"id":"8N9tE_YZCaVf"}},{"cell_type":"code","source":["my_list = [1, 2, 3, 4, 5]\n","print(my_list[-10])       # IndexError: list index out of range\n","print(my_list[10])        # IndexError: list index out of range"],"metadata":{"id":"1l3XzKoTCfK_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["А в случае выхода границ среза за границы коллекции никакой ошибки не происходит:"],"metadata":{"id":"qQGEr5I3ChQ-"}},{"cell_type":"code","source":["my_list = [1, 2, 3, 4, 5]\n","print(my_list[0:10])      # [1, 2, 3, 4, 5] — отработали в пределах коллекции\n","print(my_list[10:100])\t  # [] - таких элементов нет — вернули пустую коллекцию\n","print(my_list[10:11])     # [] - проверяем 1 отсутствующий элемент - пустая коллекция, без ошибки"],"metadata":{"id":"YcV4kQ0nCltP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Вывод на экран"],"metadata":{"id":"ZK0WLMA0xa6_"}},{"cell_type":"markdown","source":["Вывести элементы списка a можно одной инструкцией print(a), при этом будут выведены квадратные скобки вокруг элементов списка и запятые между элементами списка. Такой вывод неудобен, чаще требуется просто вывести все элементы списка в одну строку или по одному элементу в строке."],"metadata":{"id":"eakZJc-Ey9ze"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"4qhGu9UtiZRq","outputId":"65743a57-c06c-4f27-aa69-a80c3afdb77c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728119958129,"user_tz":-180,"elapsed":378,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5]\n","1 2 3 4 5\n"]}],"source":["# Оператор распаковки\n","\n","spisok = [1, 2, 3, 4, 5]\n","\n","print(spisok) # печатаем список\n","print(*spisok) # печатаем элементы списка, эквивалент - print(spisok[0],spisok[1],...)"]},{"cell_type":"markdown","source":["Приведем два примера, также отличающиеся организацией цикла:"],"metadata":{"id":"B2D2pbrt-ju5"}},{"cell_type":"code","source":["# Здесь в цикле меняется индекс элемента i, затем выводится элемент списка с индексом i.\n","\n","spisok = [1, 2, 3, 4, 5]\n","for i in range(len(spisok)): # for i in [0, 1, 2, 3, 4]\n","    print(spisok[i], end = '; ')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s8UJFCX6zCfx","executionInfo":{"status":"ok","timestamp":1728120102268,"user_tz":-180,"elapsed":583,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"52495099-8323-4968-c249-f61ece10a173"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1; 2; 3; 4; 5; "]}]},{"cell_type":"code","source":["# В этом примере элементы списка выводятся в одну строку, разделенные пробелом, при этом в цикле меняется не индекс элемента списка, а само значение переменной\n","spisok = [1, 2, 3, 4, 5]\n","for i in spisok:   # for i in [1, 2, 3, 4, 5]\n","    print(i, end = ', ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mfme286szGWS","executionInfo":{"status":"ok","timestamp":1728120184931,"user_tz":-180,"elapsed":474,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"f72f9496-4b57-431d-f0e7-3f88a668bd4e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1, 2, 3, 4, 5, "]}]},{"cell_type":"markdown","source":["Обратите особое внимание на последний пример! Очень важная часть идеологии Питона — это цикл for, который предоставляет удобный способ перебрать все элементы некоторой последовательности. В этом отличие Питона от Паскаля, где вам обязательно надо перебирать именно индексы элементов, а не сами элементы.\n","Последовательностями в Питоне являются строки, списки, значения функции range() (это не списки), и ещё кое-какие другие объекты.\n","\n","Приведем пример, демонстрирующий использование цикла for в ситуации, когда из строки надо выбрать все цифры и сложить их в массив как числа."],"metadata":{"id":"XnwK5MmRzWe2"}},{"cell_type":"code","source":["# дано: s = 'ab12c59p7dq'\n","# надо: извлечь цифры в список digits,\n","# чтобы стало так:\n","# digits == [1, 2, 5, 9, 7]\n","\n","s = 'ab12c59p7dq'\n","digits = []\n","for symbol in s:\n","    if '1234567890'.find(symbol) != -1:\n","        digits.append(int(symbol))\n","print(digits)"],"metadata":{"id":"PgVomJwrzZZx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Методы split и join"],"metadata":{"id":"6neI2Bi8xgSv"}},{"cell_type":"markdown","source":["Элементы списка могут вводиться по одному в строке, в этом случае строку целиком можно считать функцией input(). После этого можно использовать метод строки split(), возвращающий список строк, которые получатся, если исходную строку разрезать на части по пробелам. Пример:"],"metadata":{"id":"Pw2UaMOizk2f"}},{"cell_type":"code","source":["# на вход подаётся строка\n","# 1 2 3\n","s = input()  # s == '1 2 3'\n","a = s.split()  # a == ['1', '2', '3']\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ByJXx7qqzoCJ","executionInfo":{"status":"ok","timestamp":1728120287796,"user_tz":-180,"elapsed":5667,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"c05d822b-ba25-4913-c844-2118e0d410ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3\n","['1', '2', '3']\n"]}]},{"cell_type":"markdown","source":["Если при запуске этой программы ввести строку 1 2 3, то список a будет равен ['1', '2', '3']. Обратите внимание, что список будет состоять из строк, а не из чисел. Если хочется получить список именно из чисел, то можно затем элементы списка по одному преобразовать в числа:\n"],"metadata":{"id":"2EdoTxARzqOv"}},{"cell_type":"code","source":["a = input().split()\n","for i in range(len(a)):\n","    a[i] = int(a[i])\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_KQWRtIszs7i","executionInfo":{"status":"ok","timestamp":1728120335141,"user_tz":-180,"elapsed":4413,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"d01152be-7564-477f-ced7-76231bc5e250"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3 4 5\n","[3, 4, 5]\n"]}]},{"cell_type":"markdown","source":["Используя специальную магию Питона — генераторы — то же самое можно сделать в одну строку:"],"metadata":{"id":"PfMr3mAC_957"}},{"cell_type":"code","source":["print([int(s) for s in input().split()])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ID1mBTQpzxhv","executionInfo":{"status":"ok","timestamp":1728120369436,"user_tz":-180,"elapsed":4611,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"09931757-8a86-4105-ac5e-c63710fa0b66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10 15 20\n","[10, 15, 20]\n"]}]},{"cell_type":"markdown","source":["Объяснение того, как работает этот код, будет дано в следующем разделе. Если нужно считать список действительных чисел, то нужно заменить тип int на тип float.\n","\n","У метода split() есть необязательный параметр, который определяет, какая строка будет использоваться в качестве разделителя между элементами списка. Например, вызов метода split('.') вернет список, полученный разрезанием исходной строки по символам '.':"],"metadata":{"id":"mOjpkLaRz0QQ"}},{"cell_type":"code","source":["print('192.168.0.1'.split('.'))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fTVzl6bnz2-o","executionInfo":{"status":"ok","timestamp":1728120432483,"user_tz":-180,"elapsed":577,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"676cb0c3-8ddd-4f29-ff89-462cf18c5ada"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['192', '168', '0', '1']\n"]}]},{"cell_type":"code","source":["print([int(i) for i in '192.168.0.1'.split('.')])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LPhOD18UATmY","executionInfo":{"status":"ok","timestamp":1728120469068,"user_tz":-180,"elapsed":407,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"343a1428-b201-4e36-9449-e0d57cb7163e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[192, 168, 0, 1]\n"]}]},{"cell_type":"markdown","source":["В Питоне можно вывести список строк при помощи однострочной команды. Для этого используется метод строки join. У этого метода один параметр: список строк. В результате возвращается строка, полученная соединением элементов переданного списка в одну строку, при этом между элементами списка вставляется разделитель, равный той строке, к которой применяется метод. Мы знаем, что вы не поняли предыдущее предложение с первого раза. Поэтому смотрите примеры:\n","\n"],"metadata":{"id":"zFXQjfGtz5QP"}},{"cell_type":"code","source":["a = ['red', 'green', 'blue']\n","print(' '.join(a))\n","# вернёт red green blue\n","print(''.join(a))\n","# вернёт redgreenblue\n","print('***'.join(a))\n","# вернёт red***green***blue"],"metadata":{"id":"29yUkFCIz7fi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(' '.join(['Я', 'помню', 'чудное', 'мгновенье']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ZtHry3LAmvc","executionInfo":{"status":"ok","timestamp":1728120592147,"user_tz":-180,"elapsed":1027,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"e840d719-4d9f-4dd3-8517-db3e2699b1ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Я помню чудное мгновенье\n"]}]},{"cell_type":"markdown","source":["Если же список состоит из чисел, то придется использовать еще тёмную магию генераторов.\n"],"metadata":{"id":"uLog4sQdz_CX"}},{"cell_type":"code","source":["# следующая строка, к сожалению, вызывает ошибку:\n","a = [1, 2, 3]\n","print(' '.join(a))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":166},"id":"n5GlBX6lBJy4","executionInfo":{"status":"error","timestamp":1728120684347,"user_tz":-180,"elapsed":574,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"fe8b417c-602a-46aa-86d5-662c6c3b5e0f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"sequence item 0: expected str instance, int found","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-108-6ab2d44f0c52>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: sequence item 0: expected str instance, int found"]}]},{"cell_type":"code","source":["# Вывести элементы списка чисел, разделяя их пробелами, можно так:\n","a = [1, 2, 3]\n","print(' '.join([str(i) for i in a]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-XMfbRz20BE5","executionInfo":{"status":"ok","timestamp":1728120733981,"user_tz":-180,"elapsed":1043,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"9a0e30ce-c28f-4522-8b79-123c0aa32385"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n7xTK7N4iZRq","outputId":"4c5df752-315f-47d6-a46a-8bcd642f33bb"},"outputs":[{"name":"stdout","output_type":"stream","text":["['Привет,', 'я', 'обычное', 'предложение,', 'во', 'мне', 'есть', 'слова', 'и', 'пробелы']\n","Привет,___я___обычное___предложение,___во___мне___есть___слова___и___пробелы\n","['Прив', 'т,___я___обычно', '___пр', 'длож', 'ни', ',___во___мн', '___', 'сть___слова___и___проб', 'лы']\n","Привэт,___я___обычноэ___прэдложэниэ,___во___мнэ___эсть___слова___и___пробэлы\n"]}],"source":["# Полезные функции split(str) и str.join(list):\n","\n","A = 'Привет, я обычное предложение, во мне есть слова и пробелы'.split()\n","print(A)\n","\n","B = '___'.join(A)\n","print(B)\n","\n","C = B.split('е')\n","print(C)\n","\n","D = 'э'.join(C)\n","print(D)"]},{"cell_type":"markdown","metadata":{"id":"CQKLcFHJiZRq"},"source":["## Генераторы\n"]},{"cell_type":"markdown","metadata":{"id":"K6y9bUj4iZRr"},"source":["Часто используются списки, элементами которых являются числа, идущие с определенным шагом. Для создания таких списков можно использовать специальную функцию **range(start, end, step)**:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HEzVYTuniZRr","outputId":"0579b506-a4ea-499c-ce35-a527aff92fa9"},"outputs":[{"data":{"text/plain":["range(0, 10)"]},"execution_count":54,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["range"]},"execution_count":54,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]},"execution_count":54,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["[1, 2, 3, 4, 5, 6, 7, 8, 9]"]},"execution_count":54,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["[0, 3, 6, 9, 12, 15, 18]"]},"execution_count":54,"metadata":{},"output_type":"execute_result"}],"source":["# Вызов функции range(N) создает список с элементами от 0 до N-1.\n","range(10)\n","# Если честно - функция range(N) является генератором и создаёт объект типа \"итератор\"\n","type(range(10))\n","\n","# Для наглядности будем преобразовывать range в список функцией list()\n","list(range(10)) # если параметр только один, то это параметр end, а start==0 и step==1\n","list(range(1, 10)) # если параметра два, то это (start, end), а step==1\n","list(range(0, 20, 3))\n","\n","# end НЕ включительно!"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eXQafk7iiZRr","outputId":"8e7391d4-d171-4153-c88d-f9466f6609e6"},"outputs":[{"data":{"text/plain":["[100, 98, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76]"]},"execution_count":55,"metadata":{},"output_type":"execute_result"},{"ename":"TypeError","evalue":"'float' object cannot be interpreted as an integer","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-a8b1645d27f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m75\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Шаг может быть и отрицательным\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# А вот нецелым числом шаг быть не может!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'float' object cannot be interpreted as an integer"]}],"source":["list(range(100, 75, -2)) # Шаг может быть и отрицательным\n","\n","list(range(1, 10, 0.5)) # А вот нецелым числом шаг быть не может!"]},{"cell_type":"markdown","source":["## Пример. Монетка\n","\n","Подсчитаем количество выпавших \"решек\" при многократном подбрасывании монетки."],"metadata":{"id":"e3a3zKv4bKig"}},{"cell_type":"code","source":["reshka_count = 0  # счётчик решек\n","\n","for i in range(0, 1000):\n","    coin_side = random.choice(['орёл', 'решка'])\n","    if coin_side == 'решка':\n","        reshka_count += 1\n","\n","print (reshka_count"],"metadata":{"id":"SlktYodPbG8g"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Пример. Нечестная монетка\n","\n","Другой вариант: предположим, у нас есть так называемая «нечестная» монетка, где орёл (H, «heads») и решка (T, «tails») выпадают не с вероятностью ½, как положено, а по-другому: орёл с вероятностью p (H) = 0,2, а решка, соответственно, p (T) = 0,8.\n","\n","Тогда код для проверки будет выглядеть примерно так. Здесь используется другая функция, choices, в которую вместе со списком значений можно в параметре weights передавать вероятности их выпадения."],"metadata":{"id":"Bxe9DFzEbPcp"}},{"cell_type":"code","source":["import random\n","\n","H_count = 0\n","for i in range(0, 1000):\n","    new_flip = random.choices(['H', 'T'], weights=[0.2, 0.8])\n","    if new_flip == ['H']:  # внимание: функция choices возвращает список!\n","        H_count += 1\n","\n","print (H_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SXtljimMbTNR","executionInfo":{"status":"ok","timestamp":1728228240355,"user_tz":-180,"elapsed":315,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"1de36f8f-822e-4a1a-caf7-994146a549f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["200\n"]}]},{"cell_type":"markdown","source":["## Пример. Красные и зелёные шары\n","\n","Рассмотрим программу, связанную с вероятностями: «Какова вероятность вытащить зелёный шар из мешка, в котором 1 зелёный и 4 красных шара». Очевидный ответ ⅕ = 0,2.\n","Проверим статистически.\n","Функция random.choice () случайным образом выбирает значение из заданного диапазона — списка из одного «green» и четырёх «red». Код выведет количество зелёных шаров после 100 попыток.\n","Иными словами, если 1000 раз вынимать шар из мешка, возвращая его обратно, количество выпадения зелёных шаров должно приближаться к 200."],"metadata":{"id":"Dgktcwn8bn_i"}},{"cell_type":"code","source":["green_ball_count = 0  # счётчик зелёных шаров\n","\n","for i in range(0, 1000):\n","    new_ball = random.choice(['green', 'red', 'red', 'red', 'red'])\n","    if new_ball == 'green':\n","        green_ball_count = green_ball_count + 1\n","\n","print (green_ball_count)"],"metadata":{"id":"Nc4Cb2KXbsqk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x5hkQIz_iZRr"},"source":["**В питоне есть очень удобная штука под названием list comprehension, выглядит она вот так:**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"is9R_MgwiZRr","outputId":"dfe9f1af-a612-4c97-c631-7034cc195c6d"},"outputs":[{"data":{"text/plain":["[0, 4, 16, 36, 64]"]},"execution_count":56,"metadata":{},"output_type":"execute_result"}],"source":["#Общий вид такой: [выражение по всем x из список/итератор при условии что x ...]\n","\n","[x**2 for x in range(10) if x%2 == 0] # вот так можно создать список квадратов чётных чисел меньше 10\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GD5uX63MiZRs","outputId":"5a213136-8503-4810-8904-9cd1a12d66b6"},"outputs":[{"data":{"text/plain":["[(4, 2), (6, 2), (6, 3), (8, 2), (8, 4), (9, 3)]"]},"execution_count":62,"metadata":{},"output_type":"execute_result"}],"source":["# List comprehension умеет и в двойной цикл\n","\n","sorted([(y, x) for x in range(2, 10) for y in range(x+1, 10) if y%x == 0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WgcdA2yqiZRs","outputId":"56fa3f3e-f5c6-4fc8-f359-62e35fa9b8ed"},"outputs":[{"data":{"text/plain":["[[0, 0, 0], [0, 0, 0], [0, 0, 0]]"]},"execution_count":63,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["[[0, 0, 0], [0, 0, 0], [0, 0, 0]]"]},"execution_count":63,"metadata":{},"output_type":"execute_result"}],"source":["# По оговоренным ранее (каким?) причинам, вместо:\n","[[0]*3]*3\n","\n","# Лучше использовать:\n","[[0]*3 for i in range(3)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jldf7qztiZRs","outputId":"df7ce4b6-d57f-4652-95f7-78f4c3c345d0"},"outputs":[{"data":{"text/plain":["285"]},"execution_count":68,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["285"]},"execution_count":68,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["list"]},"execution_count":68,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["generator"]},"execution_count":68,"metadata":{},"output_type":"execute_result"}],"source":["# Иногда удобно создать генератор вместо списка,\n","# чтобы не хранить в памяти весь список сразу,\n","# а перебирать по одному\n","\n","sum([x*x for x in range(10)]) # list comprehension\n","sum(x*x for x in range(10))   # generator expression\n","\n","# А в чём разница?\n","\n","type([x*x for x in range(10)])\n","type(x*x for x in range(10))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NAhCmYiugcPu","outputId":"ebfc22c8-ad1b-4a37-96c7-e8894d4ccea1"},"outputs":[{"data":{"text/plain":["[31, 24, 17]"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["sp1=[31, 24, 17]\n","sp1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IeyHMV6dgcPw","outputId":"6ab1db7c-1903-42ce-a5b8-ee132ac6813d"},"outputs":[{"name":"stdout","output_type":"stream","text":["[31, 24, 17]\n"]},{"data":{"text/plain":["False"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["sp2 = list(sp1)\n","print(sp2)\n","sp2 is sp1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tBEG5dB1gcPw","outputId":"7ed10402-6eb2-4574-bf4b-ca22399c69a7"},"outputs":[{"data":{"text/plain":["[31, 24, 17]"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["sp3=list(range(31,16,-7))\n","sp3"]},{"cell_type":"markdown","metadata":{"id":"d72af90f"},"source":["### enumerate, zip"]},{"cell_type":"markdown","metadata":{"id":"e746ff4a"},"source":["`zip()` принимает два iterable аргумента и возвращает iterable из пар соответствующих элементов этих двух iterable:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"04b0f098"},"outputs":[],"source":["first = 'a b c d e f g'.split(' ')\n","second = '1 2 3 4 5 6 7'.split(' ')\n","\n","list(zip(first, second))"]},{"cell_type":"markdown","metadata":{"id":"de8a131f"},"source":["Что будет, если один из iterable короче, чем другой:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"635e1b8c"},"outputs":[],"source":["first = 'a b c d e f g'.split(' ')\n","second = '1 2 3 4 5'.split(' ')\n","\n","list(zip(first, second))"]},{"cell_type":"markdown","metadata":{"id":"46d2439c"},"source":["Это опять же полезно для использования в циклах:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3167f054"},"outputs":[],"source":["models = ['decision tree', 'linear model', 'svm', 'ensemble']\n","\n","# zip dвозвращает пару элементов, которые можно записать в 2 разные переменные в цикле for.\n","# например, здесб мы записываем первый элемент пары в num, второй -- в model.\n","for num, model in zip(range(len(models)), models):\n","    print(str(num+1)+'\\'s model is:', model)"]},{"cell_type":"markdown","metadata":{"id":"62bfc01c"},"source":["Однако в этом коде мы хотели просто пронумеровать элементы списка models, но нам для этого пришлось писать zip(range(...))\n","\n","Именно для такого случая, когда надо пронумервать элементы какого-то iterable, существует функция `enumerate`:\n","\n","`enumerate(iterable)` возвращает пары номер-элемент iterable:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d0a8d459"},"outputs":[],"source":["models = ['decision tree', 'linear model', 'svm', 'ensemble']\n","\n","# zip dвозвращает пару элементов, которые можно записать в 2 разные переменные в цикле for.\n","# например, здесб мы записываем первый элемент пары в num, второй -- в model.\n","for num, model in enumerate(models):\n","    print(str(num+1)+'\\'s model is:', model)"]},{"cell_type":"code","source":["#Функция zip - создание поэлементных кортежей (завершается по минимальному размеру из аргументов)\n","\n","[pair for pair in zip(range(10), 'abc', [1, 2])]"],"metadata":{"id":"3pTkyDj8-VUX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"a-ijm5xQjMQt"}},{"cell_type":"markdown","metadata":{"id":"e1493ddc"},"source":["### Решение квадратного уравнения. Использование метода split"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6b26e295"},"outputs":[],"source":["import math\n","e = [int(i) for i in input().split()]\n","print(e)\n","D = math.sqrt(e[2]**2 - 4*e[0]*e[1])\n","print(D)\n","x1, x2 = (-e[1]-D)/(2*e[0]), (-e[1]+D)/(2*e[0])\n","print(x1, x2)"]},{"cell_type":"markdown","metadata":{"id":"0fbef05e"},"source":["### Подсчёт количества различных значений в списке"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"42b8d29c"},"outputs":[],"source":["from collections import Counter\n","\n","list1 = [\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"d\", \"d\", \"d\", \"d\", \"e\", \"e\"]\n","counts = Counter(list1)\n","print (counts)"]},{"cell_type":"markdown","metadata":{"id":"1b5aa8fd"},"source":["### Многомерные списки - матрицы"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"51373a0d"},"outputs":[],"source":["A = [[1, 2, 3],\n","     [4, 5, 6],\n","     [7, 8, 0]]\n","B = [[6], [9], [-6]]\n","for i in range(len(A)):\n","    for j in range(len(A[i])):\n","        print(A[i][j], end = ' ')\n","    print()\n","\n","for i in range(len(A)):\n","    for j in range(len(A[i])):\n","        det = A[i][j]\n","        print(A[i][j], end = ' ')\n","    print()\n","\n","a = []\n","for i in range(int(input())):\n","    a.append(int(input()))\n","print(a)\n","print(' '.join([str j for j in a]))"]},{"cell_type":"markdown","source":["## Модуль random"],"metadata":{"id":"w3wkij1mm2VK"}},{"cell_type":"markdown","source":["Модуль random управляет генерацией случайных чисел. Его основные функции:\n","\n","random(): генерирует случайное число от 0.0 до 1.0\n","\n","randint(): возвращает случайное число из определенного диапазона\n","\n","randrange(): возвращает случайное число из определенного набора чисел\n","\n","shuffle(): перемешивает список\n","\n","choice(): возвращает случайный элемент списка\n","\n","Функция random() возвращает случайное число с плавающей точкой в промежутке от 0.0 до 1.0. Если же нам необходимо число из большего диапазона, скажем от 0 до 100, то мы можем соответственно умножить результат функции random на 100."],"metadata":{"id":"FRfcdGOYm7rJ"}},{"cell_type":"code","source":["import random\n","\n","number = random.random()  # значение от 0.0 до 1.0\n","print(number)\n","number = random.random() * 100  # значение от 0.0 до 100.0\n","print(number)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jtPJKeKunAup","executionInfo":{"status":"ok","timestamp":1728231250972,"user_tz":-180,"elapsed":314,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"e623dd95-f84a-4fed-d208-ca9f72b28486"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.7991887191027431\n","59.99010511231948\n"]}]},{"cell_type":"markdown","source":["Функция randint(min, max) возвращает случайное целое число в промежутке между двумя значениями min и max."],"metadata":{"id":"509wRUCEnLQg"}},{"cell_type":"code","source":["import random\n","\n","number = random.randint(20, 35)  # значение от 20 до 35\n","print(number)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2iOJHWUynPDK","executionInfo":{"status":"ok","timestamp":1728231308123,"user_tz":-180,"elapsed":308,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"766afc5e-e5bd-4d39-f194-45e09b885c2a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["27\n"]}]},{"cell_type":"markdown","source":["Функция randrange() возвращает случайное целое число из определенного набора чисел. Она имеет три формы:\n","\n","randrange(stop): в качестве набора чисел, из которых происходит извлечение случайного значения, будет использоваться диапазон от 0 до числа stop\n","\n","randrange(start, stop): набор чисел представляет диапазон от числа start до числа stop\n","\n","randrange(start, stop, step): набор чисел представляет диапазон от числа start до числа stop, при этом каждое число в диапазоне отличается от предыдущего на шаг step"],"metadata":{"id":"Jzn2n08knS7h"}},{"cell_type":"code","source":["import random\n","\n","number = random.randrange(10)  # значение от 0 до 10 не включая\n","print(number)\n","number = random.randrange(2, 10)  # значение в диапазоне 2, 3, 4, 5, 6, 7, 8, 9\n","print(number)\n","number = random.randrange(2, 10, 2)  # значение в диапазоне 2, 4, 6, 8\n","print(number)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DmSydOpOnWUe","executionInfo":{"status":"ok","timestamp":1728231338248,"user_tz":-180,"elapsed":408,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"65ed3329-50fd-4076-ba16-09bf96dfc202"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n","7\n","2\n"]}]},{"cell_type":"markdown","source":["### Работа со списком\n","Для работы со списками в модуле random определены две функции: функция shuffle() перемешивает список случайным образом, а функция choice() возвращает один случайный элемент из списка:\n"],"metadata":{"id":"qVAuQ9Ydmqwr"}},{"cell_type":"code","source":["numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n","random.shuffle(numbers)\n","print(numbers)\n","random_number = random.choice(numbers)\n","print(random_number)"],"metadata":{"id":"mJlQVwQbmveL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"55Hz8h-aiZRs"},"source":["## Модуль itertools\n","\n","https://docs.python.org/3/library/itertools.html"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J8u0VE3uiZRs","outputId":"c41efc58-0faa-4c1e-e5a2-2eaf1d41117f"},"outputs":[{"name":"stdout","output_type":"stream","text":["0 a\n","0 b\n","0 c\n","1 a\n","1 b\n","1 c\n","\n","0 a\n","0 b\n","0 c\n","1 a\n","1 b\n","1 c\n"]}],"source":["import itertools\n","\n","#Product: можно \"разворачивать\" циклы\n","\n","for i in range(2):\n","    for j in \"abc\":\n","        print(i, j)\n","\n","print()\n","\n","#Эквивалентно:\n","for i, j in itertools.product(range(2), \"abc\"):\n","    print(i, j)"]},{"cell_type":"markdown","metadata":{"id":"UzeyY8zMiZRt"},"source":["Прочая комбинаторика: перестановки, комбинации, комбинации с повторениями"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"30bPf99MiZRt","outputId":"1bfa796e-6417-402a-d662-7e86c75a694d"},"outputs":[{"data":{"text/plain":["[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["list(itertools.permutations([1,2,3]))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oBaDh8ayiZRt","outputId":"c79867a1-7459-45ce-9b8f-effe94627a4b"},"outputs":[{"data":{"text/plain":["[(1, 2), (1, 3), (2, 3)]"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["list(itertools.combinations([1,2,3], 2))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zD4EMC1_iZRt","outputId":"783c0e5d-fc13-4e45-ad38-ae21c7befb6d"},"outputs":[{"data":{"text/plain":["[(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["list(itertools.combinations_with_replacement([1,2,3], 2))"]},{"cell_type":"markdown","metadata":{"id":"CKR_T7mKiZRu"},"source":["Бесконечные генераторы: count, cycle, repeat"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vXv7dH1biZRu","outputId":"14f149c4-d08e-4bc1-a7d6-35d9ca2d37e3"},"outputs":[{"name":"stdout","output_type":"stream","text":["(0, 1, 'oak', 0)\n","(1, 2, 'oak', 1)\n","(2, 3, 'oak', 2)\n","(3, 1, 'oak', 3)\n","(4, 2, 'oak', 4)\n","(5, 3, 'oak', 5)\n","(6, 1, 'oak', 6)\n"]}],"source":["for elems in zip(itertools.count(), itertools.cycle([1,2,3]), itertools.repeat(\"oak\"), range(7)):\n","    print(elems)"]},{"cell_type":"markdown","metadata":{"id":"12NaPF0LiZRu"},"source":["первые N элементов"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_OlM9SvuiZRu","outputId":"16a1b0f9-6e40-438a-c0cf-b277a444d120"},"outputs":[{"data":{"text/plain":["[0, 1, 2, 3, 4]"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["list(itertools.islice(itertools.count(), 5))"]},{"cell_type":"markdown","metadata":{"id":"3Gyn6dY6iZRv"},"source":["### Создание и удаление\n","\n","\n","- Note: При создании двух mutable-объектов отдельно - они будут гарантированно разными. Для immutable объектов это верно не всегда.\n","- Об удалении объектов заботиться не нужно, за вас всё сделает интерпретатор"]},{"cell_type":"markdown","metadata":{"id":"2cVREZWbgcPs"},"source":["# Задачи"]},{"cell_type":"markdown","metadata":{"id":"KkPk4KGmgcPu"},"source":["1) Создать список из чисел 31, 24, 17 тремя способами: перечисление, на основе другого списка (по сути, создать копию списка), с помощью функции range. Вывести списки на печать. Создать и вывести список, состоящий из полученных списков."]},{"cell_type":"code","source":["a = [31, 24, 17]\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XRs57HxuFSLc","executionInfo":{"status":"ok","timestamp":1728121859080,"user_tz":-180,"elapsed":382,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"5db6bd24-5d61-4e0b-cca3-c2db0a54fedd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[31, 24, 17]\n"]}]},{"cell_type":"code","source":["b = [i for i in a]\n","print(b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gBMP9fxuFhQN","executionInfo":{"status":"ok","timestamp":1728121862679,"user_tz":-180,"elapsed":396,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"4d979e1a-477a-437a-90a3-f3bacc51139c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[31, 24, 17]\n"]}]},{"cell_type":"code","source":["c = []\n","for i in range(3):\n","  c.append(int(input()))\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XCXiBo_K6vKW","executionInfo":{"status":"ok","timestamp":1728121875808,"user_tz":-180,"elapsed":8643,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"6cb48531-a588-4e68-84e8-857625896b7e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["31\n","24\n","17\n","[31, 24, 17]\n"]}]},{"cell_type":"code","source":["d = []\n","d.append(a)\n","d.append(b)\n","d.append(c)\n","print(d)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QH6xEBnQFzR8","executionInfo":{"status":"ok","timestamp":1728121996559,"user_tz":-180,"elapsed":500,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"1434d277-f44f-41c8-a293-aba19a568ffb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[31, 24, 17], [31, 24, 17], [31, 24, 17]]\n"]}]},{"cell_type":"markdown","source":["Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...)."],"metadata":{"id":"FJRH2ibr4mhv"}},{"cell_type":"markdown","source":["Выведите все четные элементы списка. При этом используйте цикл for, перебирающий элементы списка, а не их индексы!"],"metadata":{"id":"iImTB3pB4yjf"}},{"cell_type":"markdown","source":["Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента."],"metadata":{"id":"QzMP1PtZ40WJ"}},{"cell_type":"markdown","source":["Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. Если соседних элементов одного знака нет — не выводите ничего. Если таких пар соседей несколько — выведите первую пару."],"metadata":{"id":"-vZUV6Xn45zX"}},{"cell_type":"markdown","source":["Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей, и выведите количество таких элементов. Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей."],"metadata":{"id":"ZDGqPzgT47Rv"}},{"cell_type":"markdown","source":["Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке. Если наибольших элементов несколько, выведите индекс первого из них."],"metadata":{"id":"2HL0K9H54-Uo"}},{"cell_type":"markdown","source":["Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. Помогите ему это сделать.\n","Программа получает на вход невозрастающую последовательность натуральных чисел, означающих рост каждого человека в строю. После этого вводится число X – рост Пети. Все числа во входных данных натуральные и не превышают 200.\n","\n","Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, таким же, как у Пети, то он должен встать после них."],"metadata":{"id":"3yc57lcG5D0P"}},{"cell_type":"markdown","source":["Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов."],"metadata":{"id":"8NVCNPDw5GC3"}},{"cell_type":"markdown","metadata":{"id":"Jknpu1REgcPw"},"source":["2.1) Создать список из всех символов имеющихся во введенной пользователем строке."]},{"cell_type":"code","source":["print(list(input()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X11eVsaJGWR0","executionInfo":{"status":"ok","timestamp":1728122071942,"user_tz":-180,"elapsed":11718,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"b4d2fb03-5fb4-40af-bd0a-a20882cc1f50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, world!\n","['H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!']\n"]}]},{"cell_type":"markdown","metadata":{"id":"pya7DevegcPx"},"source":["2.2) Создать список из всех слов имеющихся во введенной пользователем строке."]},{"cell_type":"code","source":["print(input().split())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V1cbj3GKGlZ_","executionInfo":{"status":"ok","timestamp":1728122184930,"user_tz":-180,"elapsed":8853,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"b48772c8-121b-417f-8bd7-294c12be3897"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello world\n","['Hello', 'world']\n"]}]},{"cell_type":"markdown","metadata":{"id":"90-7G-ObgcPx"},"source":["2.3) Создать и вывести список из всех цифр, встречающихся в заданной строке."]},{"cell_type":"code","source":["s = input()\n","digits = []\n","for symbol in s:\n","    if '1234567890'.find(symbol) != -1: # если символ содержится в 1234567890, то есть является цифрой\n","        digits.append(int(symbol))\n","print(digits)\n","\n","# Метод find находит в данной строке (к которой применяется метод) данную подстроку (которая передается в качестве параметра).\n","# Функция возвращает индекс первого вхождения искомой подстроки. Если же подстрока не найдена, то метод возвращает значение -1."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c-PoG6DrHBIc","executionInfo":{"status":"ok","timestamp":1728122517454,"user_tz":-180,"elapsed":5524,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"9a566cb3-c1d1-484c-fa8c-ba552b9628cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["12мии54567\n","[1, 2, 5, 4, 5, 6, 7]\n"]}]},{"cell_type":"markdown","metadata":{"id":"xQv6zyAFgcPy"},"source":["3) Если в заданный список входит слово \"repeat\", а последний элемент - число, то заменить список на столько же копий всех элементов, не считая последних двух (последние два просто добавить). Например, список ['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3]."]},{"cell_type":"markdown","metadata":{"id":"VpNdrQBbgcPy"},"source":["4) Создать список из двух произвольных строк s1 и s2, их длин и результата проверки соблюдения лексикографического порядка (идет ли первая строка раньше второй). В зависимости от параметра output путем обращения к элементам списка выводить либо длины строк (output='lengths', в формате \"Длины строк: 4 и 5\"), либо описание порядка (output='order', в формате \"Строка 'первая' идет ПОСЛЕ строки 'вторая'\")."]},{"cell_type":"markdown","metadata":{"id":"JoNcTM_hgcPy"},"source":["5.1) Запросить у пользователя 2 целых числа и сохранить их в переменных max_val, repeat. Создать  список из целых чисел со  значениями от 1 до max_val включительно повторяющийся repeat раз.\n","\n","Например для max_val=4, repeat=4 будет создан список:\n","\n","[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,]"]},{"cell_type":"markdown","metadata":{"id":"x7EyjJIWgcPz"},"source":["5.2) На основе списка из 5.1 созданного при max_val = 10 создать его копию (значение repeat заранее неизвестно). В копии с помощью среза удалить 80% элементов из середины. Все элементы исходного списка, которые не сохранены в скопированном списке, умножить на десять."]},{"cell_type":"markdown","metadata":{"id":"HcRYirfegcPz"},"source":["6) Из произвольной строки создать список. Вместо каждой буквы \"s\" (без учета регистра), стоящей не на первом и не на последнем месте, вставить в список строку из двойного предыдущего символа и одного следующего. Например, из строки \"test\\_Stringss\" должен получиться список ['t', 'e', 'eet', 't', '\\_', '\\__t', 't', 'r', 'i', 'n', 'g', 'ggs', 's']."]},{"cell_type":"markdown","metadata":{"id":"x7Vavt_FgcP0"},"source":["7)* Организовать заполнение списка заданной длины пользователем через input(). Если на вход подается число (целое или через точку), то записывать в список целое число с округлением вверх. Если \"True\" или \"False\", то как boolean. Иначе - как строку."]},{"cell_type":"markdown","metadata":{"id":"k8YiohiBgcP0"},"source":["--------------"]},{"cell_type":"markdown","metadata":{"id":"BZzJhnaDgcP0"},"source":["8) Заданы две заранее неизвестные строки в которых слова разделены пробелами. Из двух строк составить одну, в котрой слова из первой и второй строки будут чередоваться при этом порядок слов будет сохранен. Для преобразований использовать списки слов.\n","\n","Пример: 'один два три', 'альфа бетта гамма' -> 'один альфа два бетта три гамма'"]},{"cell_type":"markdown","metadata":{"collapsed":true,"id":"9wDXGp-NgcP0"},"source":["9) Решить здачу 8 используя функцию zip."]},{"cell_type":"markdown","metadata":{"id":"dQulfIrogcP1"},"source":["10) Выполнить циклический сдвиг слов в произвольной строке (слова разделены пробелами) на заднное пользователем число слов. Решить с помощью списков слов.\n","\n","Пример \"один два три четыре пять шесть семь\", 3 -> \"четыре пять шесть семь один два три\""]},{"cell_type":"markdown","metadata":{"id":"LxrVnjFEgcP1"},"source":["11) В списке целых чисел из диапозона от 1 до 20 заменить все числа не являющиеся простыми на составляющие их простые множители (которые включаются в виде отдельных элементов списка на место исключаемого числа). Каратные простые множетели добавлять количество раз составляющее их кратность в исходном числе.\n","\n","Пример: [3, 6, 7, 12] -> [3, 2, 3, 7, 2, 2, 3]"]},{"cell_type":"markdown","metadata":{"id":"MXgFISbMgcP1"},"source":[" 12) В списке, состоящем из чисел найти значение меньше или равно которому только одно значения из списка."]},{"cell_type":"markdown","metadata":{"id":"u3uRROSDgcP2"},"source":["13) Найти индекс в списке для значения, найденного в задаче 12."]},{"cell_type":"markdown","metadata":{"id":"WQp4O9P3gcP2"},"source":["14) Найти индекс второго с конца вхождения значения 1 в список из целых чисел.ь"]},{"cell_type":"markdown","metadata":{"id":"ZJCDAR5HgcP3"},"source":["15) Реализовать функцию умножения двух матриц, записанных как список списков. Проверить на умножении матрицы на единичную матрицу."]},{"cell_type":"markdown","metadata":{"id":"Y-6JJywggcP3"},"source":["16) Создать копию матрицы, записанной в виде вложенных списков, так что при изменении элементов исходной матрицы, скопированная матрица меняться не будет."]},{"cell_type":"markdown","metadata":{"id":"wDUGSYqLgcP4"},"source":["17) Осортировать слова в строке (с пробелом в качестве разделителя) в лексикографическом порядке.\n","\n","Пример: 'дыня абрикос яблоко арбуз' -> 'абрикос арбуз дыня яблоко'"]},{"cell_type":"markdown","metadata":{"id":"SyqObMTRgcP4"},"source":["18) Имеется переменная lsls содержащая список списков. Заранее неизвестно, сколько в переменной списков и какой они длины (их длины в общем случае различны). Из этих списков составить список, содержащий поорчедно элементы каждого из вложенных списков, при этом, порядок этих элементов сохраняется. Процедура создания списка останавливается когда хотя бы в одном из исходных вложенных списков будут использованные все элементы. Кроме составленного списка получить список из всех элементов не вошедших в составленный список.\n","\n","Пример: lsls=[[1,2,3],['a', 'b'], [30, 40, 50, 60]] -> [1, 'a', 30, 2, 'b', 40], [3, 50, 60]"]},{"cell_type":"markdown","source":["Упражнение 110. Порядок сортировки\n","(Решено. 22 строки)\n","Напишите программу, которая будет запрашивать у пользователя цело-\n","численные значения и сохранять их в виде списка. Индикатором оконча-\n","ния ввода значений должен служить ноль. Затем программа должна вы-\n","вести на экран все введенные пользователем числа (кроме нуля) в порядке\n","возрастания – по одному значению в строке. Используйте для сортировки\n","либо метод sort, либо функцию sorted.\n","\n","Упражнение 111. Обратный порядок\n","(20 строк)\n","Напишите программу, которая, как и в предыдущем случае, будет за-\n","прашивать у пользователя целые числа и сохранять их в виде списка.\n","Индикатором окончания ввода значений также должен служить ноль. На\n","этот раз необходимо вывести на экран введенные значения в порядке\n","убывания."],"metadata":{"id":"_vKEKxdTDQVt"}},{"cell_type":"markdown","source":["Упражнение 112. Удаляем выбросы\n","(Решено. 44 строки)\n","При анализе собранных по результатам научных экспериментов данных\n","зачастую возникает необходимость избавиться от экстремальных зна-\n","чений, прежде чем продолжать двигаться дальше. Напишите функцию,\n","создающую копию списка с исключенными из него n наибольшими и наи-\n","меньшими значениями и возвращающую ее в качестве результата. Поря-\n","док следования элементов в измененном списке не обязательно должен\n","в точности совпадать с источником.\n","В основной программе должна быть продемонстрирована работа вашей\n","функции. Для начала попросите пользователя ввести целые числа, затем\n","соберите их в список и вызовите написанную вами ранее функцию. Вы-\n","ведите на экран измененную версию списка вместе с оригинальной. Если\n","пользователь введет менее четырех чисел, должно быть отображено соот-\n","ветствующее сообщение об ошибке.\n","\n","Упражнение 113. Избавляемся от дубликатов\n","(Решено. 21 строка)\n","В данном упражнении вам предстоит разработать программу, в которой\n","у пользователя будет запрошен список слов, пока он не оставит строку\n","ввода пустой. После этого на экране должны быть показаны слова, введен-\n","ные пользователем, но без повторов, – каждое по одному разу. При этом\n","слова должны быть отображены в том же порядке, в каком их вводили\n","с клавиатуры. Например, если пользователь на запрос программы введет\n","следующий список слов:\n","first\n","second\n","first\n","third\n","second\n","программа должна вывести:\n","first\n","second\n","third\n","\n","Упражнение 114. Отрицательные, положительные и нули\n","(Решено. 36 строк)\n","Напишите программу, запрашивающую у пользователя целые числа, пока\n","он не оставит строку ввода пустой. После окончания ввода на экран долж-\n","ны быть выведены сначала все отрицательные числа, которые были вве-\n","дены, затем нулевые и только после этого положительные. Внутри каждой\n","группы числа должны отображаться в той последовательности, в которой\n","были введены пользователем. Например, если он ввел следующие числа:\n","3, -4, 1, 0, -1, 0 и -2, вывод должен оказаться таким: -4, -1, -2, 0, 0, 3 и 1.\n","Каждое значение должно отображаться на новой строке.\n","\n","Упражнение 115. Список собственных делителей\n","(36 строк)\n","Собственным делителем числа называется всякий его делитель, отличный\n","от самого числа. Напишите функцию, которая будет возвращать список\n","всех собственных делителей заданного числа. Само это число должно\n","передаваться в функцию в виде единственного аргумента. Результатом\n","функции будет перечень собственных делителей числа, собранных в спи-\n","сок. Основная программа должна демонстрировать работу функции, за-\n","прашивая у пользователя число и выводя на экран список его собственных\n","делителей. Программа должна запускаться только в том случае, если она\n","не импортирована в виде модуля в другой файл.\n","\n","Упражнение 116. Совершенные числа\n","(Решено. 35 строк)\n","\n","Целое число n называется совершенным, если сумма всех его собственных\n","делителей равна самому числу n. Например, 28 – это совершенное число,\n","поскольку его собственными делителями являются 1, 2, 4, 7 и 14, а 1 + 2\n","+ 4 + 7 + 14 = 28.\n","Напишите функцию для определения того, является ли заданное число\n","совершенным. Функция будет принимать на вход единственный пара-\n","метр и возвращать True, если он представляет собой совершенное число,\n","и False – если нет. Разработайте небольшую программу, которая будет\n","использовать функцию для идентификации и вывода на экран всех со-\n","вершенных чисел в диапазоне от 1 до 10 000. При решении этой задачи\n","импортируйте функцию, написанную в упражнении 115.\n","\n","Упражнение 117. Только слова\n","(38 строк)\n","\n","В данном упражнении вы напишете программу, которая будет выделять\n","слова из строки, введенной пользователем. Начните с создания функции,\n","принимающей на вход единственный строковый параметр. В качестве\n","результата она должна возвращать список слов из строки с удаленны-\n","ми знаками препинания, в число которых должны входить точки, за-\n","пятые, восклицательный и вопросительный знаки, дефисы, апострофы,\n","двоеточия и точки с запятыми. При этом не нужно избавляться от знаков\n","препинания, стоящих внутри слова, таких как апостроф, служащий в английском\n","языке для обозначения сокращений. Например, если на вход\n","функции дать строку \"Contractions include: don’t, isn’t, and wouldn’t.\",\n","функция должна вернуть следующий список: [\"Contractions\", \"include\",\n","\"don’t\", \"isn’t\", \"an d\", \"wouldn’t\"].\n","В основной программе, как обычно, должна происходить демонстрация\n","вашей функции. Запросите у пользователя строку и выведите на экран\n","все составляющие ее слова с удаленными знаками препинания. Вам по-\n","надобятся написанные при решении заданий 118 и 167 ф ункции, так что\n","убедитесь, что основная программа выполняется только в случае, если\n","файл не импортирован в качестве модуля.\n","Упражнение 118. Словесные палиндромы\n","(34 строки)\n","В упражнениях 75 и 76 мы уже имели дело со словами, являющимися па-\n","линдромами. Тогда мы анализировали буквы в слове с начала и конца, иг-\n","норируя пробелы и знаки препинания, чтобы понять, совпадает ли его\n","написание в прямом и обратном направлениях. И хотя палиндромами\n","обычно называют слова, это понятие вполне можно расширить. Например,\n","английская фраза «Is it crazy how saying sentences backwards creates backwards\n","sentences saying how crazy it is?» является словесным палиндромом,\n","поскольку если читать ее по словам, игнорируя при этом знаки препинания\n","и заглавные буквы, в обоих направлениях она будет звучать одинаково. Еще\n","примеры английских словесных палиндромов: «Herb the sage eats sage, the\n","herb» и «Information school graduate seeks graduate school information».\n","Напишите программу, которая будет запрашивать строку у пользова-\n","теля и оповещать его о том, является ли она словесным палиндромом. Не\n","забывайте игнорировать знаки препинания при выявлении результата.\n","Упражнение 119. Ниже и выше среднего\n","(44 строки)\n","Напишите программу, которая будет запрашивать у пользователя чис-\n","ла, пока он не пропустит ввод. Сначала на экран должно быть выведено\n","среднее значение введенного ряда чисел, после этого друг за другом не-\n","обходимо вывести список чисел ниже среднего, равных ему (если такие\n","найдутся) и выше среднего. Каждый список должен предваряться соот-\n","ветствующим заголовком.\n","Упражнение 120. Форматирование списка\n","(Решено. 41 строка)\n","Обычно при написании перечислений и списков мы разделяем их эле-\n","менты запятыми, а перед последним ставим союз «и», как показано ниже:\n","яблоки\n","яблоки и апельсины\n","яблоки, апельсины и бананы\n","яблоки, апельсины, бананы и лимоны\n","Напишите функцию, которая будет принимать на вход список из строк\n","и возвращать собранную строку из его элементов в описанной выше ма-\n","нере. Хотя в представленном примере количество элементов списка огра-\n","ничивается четырьмя, ваша функция должна уметь обрабатывать списки\n","любой длины. В основной программе запросите у пользователя несколько\n","элементов списка, отформатируйте их должным образом при помощи\n","функции и выведите на экран.\n","Упражнение 121. Случайные лотерейные номера\n","(Решено. 28 строк)\n","Для выигрыша главного приза необходимо, чтобы шесть номеров на ло-\n","терейном билете совпали с шестью числами, выпавшими случайным об-\n","разом в диапазоне от 1 до 49 во время очередного тиража. Напишите про-\n","грамму, которая будет случайным образом подбирать шесть номеров для\n","вашего билета. Убедитесь в том, что среди этих чисел не будет дубликатов.\n","Выведите номера билетов на экран по возрастанию.\n","Упражнение 122. «Поросячья латынь»\n","(32 строки)\n","«Поросячьей латынью» называют молодежный жаргонный язык, произ-\n","водный от английского. И хотя корни этого новообразованного языка\n","неизвестны, упоминание о нем есть как минимум в двух документах,\n","датированных XIX веком, а это значит, что ему уже больше сотни лет.\n","Для перевода слова с английского на «поросячью латынь» нужно сделать\n","следующее:\n"," если слово начинается с согласной буквы (включая y), то все буквы\n","с начала слова и до первой гласной (за исключением y) переносятся\n","в конец слова и дополняются сочетанием букв ay. Например, слово\n","computer будет преобразовано в omputercay, а слово think – в inkthay;\n"," если слово начинается с гласной буквы (не включая y), к концу сло-\n","ва просто добавляется way. К примеру, слово algorithm превратится\n","в algorithmway, а office – в officeway.\n","Напишите программу, которая будет запрашивать у пользователя стро-\n","ку. После этого она должна переводить введенный текст на «поросячью\n","латынь» и выводить его на экран. Вы можете сделать допуск о том, что\n","все слова пользователь будет вводить в нижнем регистре и разделять их\n","пробелами.\n","\n","Упражнение 123. «Поросячья латынь» (продолжение)\n","(51 строка)\n","Расширьте свое решение упражнения 122, чтобы ваш анализатор корректно\n","обрабатывал символы в верхнем регистре и знаки препинания, такие\n","как запятая, точка, а также восклицательный и вопросительный знаки.\n","Если в оригинале слово начинается с заглавной буквы, то в переводе на\n","«поросячью латынь» оно также должно начинаться с заглавной буквы,\n","тогда как буквы, перенесенные в конец слов, должны стать строчными.\n","Например, слово Computer должно быть преобразовано в Omputercay. Если\n","в конце слова стоит знак препинания, он там же и должен остаться после\n","выполнения перевода. То есть слово в конце предложения Science! необ-\n","ходимо трансформировать в Iencescay!\n","\n","Упражнение 124. Линия наилучшего соответствия\n","(41 строка)\n","Линией наилучшего соответствия называется прямая, проходящая на\n","наименьшем удалении от набора из n точек. В данном упражнении мы\n","предположим, что каждая точка в коллекции обладает координатами x\n","и y. Символы и мы будем использовать для подсчета средних зна-\n","чений по осям x и y соответственно. Линия наилучшего соответствия\n","представлена формулой y = mx + b, где m и b вычисляются по следующим\n","формулам:\n","Напишите программу, которая будет запрашивать у пользователя ко-\n","ординаты коллекции точек. При этом пользователь должен вводить сна-\n","чала координату x, а затем y. Ввод координат может продолжаться до тех\n","пор, пока пользователь не оставит пустым ввод координаты x. Отобра-\n","зите формулу, характеризующую линию наилучшего соответствия, вида\n","y = mx + b путем замены переменных m и b на значения, вычисленные\n","по предыдущим формулам. Например, если пользователь введет три\n","точки (1, 1), (2, 2.1) и (3, 2.9), итоговая формула должна приобрести вид\n","y = 0,95x + 0,1.\n","\n","Упражнение 125. Тасуем колоду карт\n","(Решено. 49 строк)\n","Стандартная игральная колода состоит из 52 карт. Каждая карта соответ-\n","ствует одной из четырех мастей (пики, червы, бубны и трефы) и одному\n","из 13 номиналов (от 2 до 10, валет (J), дама (Q), король (K) и туз (A)).\n","Таким образом, каждая игральная карта может быть представлена при\n","помощи двух символов. Первый из них указывает на номинал карты (от\n","2 до 9, T (десятка), J, Q, K или A), а второй – на масть (s = пики (spades),\n","h = червы (hearts), d = бубны (diamonds) и c = трефы (clubs)). В табл. 5.1\n","представлены некоторые из возможных обозначений игральных карт.\n","Таблица 5.1. Игральные карты\n","Карта Обозначение\n","Валет пик Js\n","Двойка треф 2c\n","Десятка бубен Td\n","Туз червей Ah\n","Девятка пик 9s\n","Начните с написания функции createDeck. В ней должны использоваться\n","циклы для создания полной колоды карт путем сохранения в список двух-\n","символьных аббревиатур всех 52 карт. Именно этот список и будет воз-\n","вращаемым из данной функции значением. На вход функция createDeck\n","принимать параметры не будет.\n","Напишите вторую функцию с именем shuffle, которая будет случай-\n","ным образом перетасовывать карты в списке. Одна из техник тасования\n","колоды заключается в проходе по элементам и перестановке их с любым\n","другим случайным элементом в этом списке. Вы должны создать свой\n","собственный цикл для тасования карт в колоде, а не пользоваться стан-\n","дартной функцией shuffle языка Python.\n","Используйте обе созданные функции в основной программе, в которой\n","должна отображаться колода карт до и после тасования. Убедитесь, что\n","основная программа выполняется только в случае, если файл не импор-\n","тирован в качестве модуля.\n","Примечание. Хороший алгоритм тасования игральной колоды должен быть беспри-\n","страстным, что означает равную вероятность расположения каждой из карт в колоде\n","после тасования. Однако алгоритм, предложенный в этом упражнении и предполага-\n","ющий обмен позициями между каждой из карт в колоде с любой другой случайной\n","\n","картой, не является таковым. В частности, карты, которые появляются позже в исход-\n","ном списке, с большой вероятностью окажутся ближе к концу и в перетасованном\n","списке. Как это ни странно, беспристрастной будет версия алгоритма, в которой при\n","последовательном проходе по элементам каждый из них будет меняться позициями\n","не со случайным элементом из всего списка, а со случайным элементом в диапазоне\n","от позиции текущей карты и до конца колоды.\n","Упражнение 126. Раздача карманных карт\n","(44 строки)\n","Во многих карточных играх после процедуры тасования колоды каждый\n","игрок получает на руки определенное количество карт. Напишите функ-\n","цию deal, принимающую на вход три параметра: количество игроков,\n","количество раздаваемых каждому из них карт и саму колоду. Функция\n","должна возвращать список рук, которые были розданы игрокам. При этом\n","каждая рука, в свою очередь, тоже является списком из входящих в нее\n","карт.\n","Во время раздачи карт игрокам функция параллельно должна удалять\n","розданные карты из переданной ей третьим параметром колоды. Также\n","принято раздавать карты каждому игроку по одной строго по очереди.\n","Придерживайтесь этих принципов и при написании своей функции.\n","Воспользуйтесь своими наработками из упражнения 125 при построении\n","структуры основной программы. Вам необходимо создать колоду\n","карт, перетасовать ее и раздать четырем игрокам по пять карт. Выведите\n","на экран карманные карты всех игроков, находящихся в раздаче, а также\n","оставшиеся в колоде карты.\n","Упражнение 127. Список уже отсортирован?\n","(41 строка)\n","Напишите функцию, показывающую, отсортирован ли переданный ей\n","в качестве параметра список (по возрастанию или убыванию). Функция\n","должна возвращать True, если список отсортирован, и False в противном\n","случае. В основной программе запросите у пользователя последователь-\n","ность чисел для списка, после чего выведите сообщение о том, является\n","ли этот список отсортированным изначально.\n","Примечание. Убедитесь в том, что вы правильно обрабатываете пустые списки, а так-\n","же списки, состоящие из единственного элемента.\n","\n","Упражнение 128. Подсчитать элементы в списке\n","(Решено. 48 строк)\n","В стандартной библиотеке языка Python присутствует функция count, по-\n","зволяющая подсчитать, сколько раз определенное значение встречается\n","в списке. В данном упражнении вы создадите новую функцию countRange,\n","которая будет подсчитывать количество элементов в списке, значения\n","которых больше или равны заданному минимальному порогу и мень-\n","ше максимального. Функция должна принимать три параметра: список,\n","минимальную границу и максимальную границу. Возвращать она будет\n","целочисленное значение, большее или равное нулю. В основной програм-\n","ме реализуйте демонстрацию вашей функции для нескольких списков\n","с разными минимальными и максимальными границами. Удостоверьтесь,\n","что программа будет корректно работать со списками, содержащими как\n","целочисленные значения, так и числа с плавающей запятой.\n","Упражнение 129. Разбиение строки на лексемы\n","(Решено. 47 строк)\n","Разбиение строки на лексемы (Tokenizing) представляет собой процесс пре-\n","образования исходной строки в список из подстрок, называемых лексе-\n","мами (token). Зачастую со списком лексем работать бывает проще, чем со\n","всей исходной строкой, поскольку в ней могут присутствовать неравно-\n","мерные разрывы. Кроме того, иногда бывает непросто на лету определить,\n","где заканчивается одна лексема и начинается другая.\n","В математических выражениях лексемами являются, например, опера-\n","торы, числа и скобки. Здесь и далее мы будем причислять к списку опе-\n","раторов следующие: *, /, ˆ, - и +. Операторы и скобки легко идентифици-\n","ровать, поскольку эти лексемы всегда состоят ровно из одного символа\n","и никогда не являются составной частью других лексем. Числа выделить\n","бывает сложнее, поскольку эти лексемы могут состоять из нескольких\n","символов. Любая непрерывная последовательность цифр должна воспри-\n","ниматься как одна числовая лексема.\n","Напишите функцию, принимающую в качестве единственного вход-\n","ного параметра строку, содержащую математическое выражение, и пре-\n","образующую ее в список лексем. Каждая лексема должна быть либо опе-\n","ратором, либо числом, либо скобкой. Для простоты реализации в данном\n","упражнении мы будем оперировать только целочисленными значениями.\n","Функция должна возвращать созданный список лексем.\n","При решении поставленной задачи вы можете принять допущение\n","о том, что входная строка всегда будет содержать математическое выраже-\n","ние, состоящее из скобок, чисел и операторов. При этом в вашей функции\n","должно быть предусмотрено, что лексемы могут отделяться друг от друга\n","разным количеством пробелов, а могут и не отделяться вовсе. В основной\n","\n","программе продемонстрируйте работу функции, запросив у пользователя\n","исходную строку и выведя на экран список составляющих ее лексем. Убе-\n","дитесь, что основная программа выполняется только в случае, если файл\n","не импортирован в качестве модуля.\n","Упражнение 130. Унарные и бинарные операторы\n","(Решено. 45 строк)\n","Математические операторы бывают унарными (unary) и бинарными (binary).\n","Унарные операторы взаимодействуют с одним значением, тогда как\n","бинарные – с двумя. Например, в выражении 2 * –3 оператор * является\n","бинарным, поскольку взаимодействует с двумя числами: 2 и -3. При этом\n","сам оператор – здесь унарный, ведь он применяется только к одному чис-\n","лу 3.\n","Одного лишь символа оператора недостаточно, чтобы определить,\n","является ли он унарным или бинарным. Например, хотя в предыдущем\n","случае оператор – был унарным, в выражении 2 – 3 он приобретет роль\n","бинарного. Подобная неоднозначность, также характерная для оператора\n","сложения, должна быть устранена до применения других операций к эле-\n","ментам списка лексем математического выражения.\n","Напишите функцию для поиска унарных операторов + и – в списке лек-\n","сем и их замены на сочетание символов u+ и u– соответственно. Функция\n","должна принимать в качестве единственного параметра список лексем\n","математического выражения и возвращать его копию с произведенной\n","заменой унарных операторов. Оператор + или – можно идентифицировать\n","как унарный в одном из двух случаев: если он идет первым в списке или\n","если ему предшествует другой оператор либо открывающая скобка. Во\n","всех остальных случаях оператор может считаться бинарным.\n","В основной программе продемонстрируйте работу функции. Запросите\n","у пользователя строку с математическим выражением, разбейте ее на\n","лексемы, выделите в отдельный список унарные операторы и выведите\n","их на экран.\n","Упражнение 131. Инфиксная запись – в постфиксную\n","(63 строки)\n","Математические выражения часто записываются в инфиксной форме (infix\n","form), когда оператор ставится между операндами, с которыми взаимо-\n","действует. И хотя такая форма записи наиболее распространена, существует\n","и другая, именуемая постфиксной (postfix form), в которой оператор\n","ставится после операндов. Например, инфиксной форме записи выра-\n","жения 3 + 4 будет соответствовать постфиксный вариант 3 4 +. Чтобы\n","преобразовать инфиксную форму записи в постфиксную, необходимо вы-\n","полнить следующий алгоритм действий.\n","\n","Создаем новый пустой список operators\n","Создаем новый пустой список postfix\n","Для каждой лексемы в инфиксном выражении\n","Если лексема представляет собой целое число, то\n","Добавляем лексему к списку postfix\n","Если лексема представляет собой оператор, то\n","Пока список operators не пустой и\n","последний элемент в operators не открывающая скобка и\n","precedence(лексема) < precedence(последний элемент в operators), делаем\n","Удаляем последний элемент из списка operators и добавляем его к postfix\n","Добавляем лексему к списку operators\n","Если лексема представляет собой открывающую скобку, то\n","Добавляем лексему к списку operators\n","Если лексема представляет собой закрывающую скобку, то\n","Пока последний элемент в operators не является открывающей скобкой, делаем\n","Удаляем последний элемент из списка operators и добавляем его к postfix\n","Удаляем открывающую скобку из operators\n","Пока список operators не пустой, делаем\n","Удаляем последний элемент из списка operators и добавляем его к postfix\n","Возвращаем postfix в качестве результата алгоритма\n","Используйте свои наработки из упражнений 129 и 130 для разделения\n","математических выражений на лексемы и поиска в них унарных опера-\n","торов. После этого используйте алгоритм, приведенный выше, для преоб-\n","разования выражения из инфиксной формы в постфиксную. Код, реали-\n","зующий этот алгоритм, должен быть заключен в функцию, принимающую\n","на вход список лексем инфиксного выражения (с помеченными унарными\n","операторами). Возвращать функция будет список лексем в постфиксном\n","выражении. В основной программе продемонстрируйте работу функции\n","по преобразованию инфиксной формы записи математического выра-\n","жения в постфиксную. Запросите у пользователя выражение инфиксного\n","типа и выведите на экран его постфиксный аналог.\n","Цель перевода математического выражения из одного вида в другой\n","будет понятна вам, когда вы прочитаете текст упражнения 132. Кроме\n","того, вам могут понадобиться наработки из заданий 96 и 97 при решении\n","этого упражнения. И если первое решение вы можете использовать как\n","есть, то решение задания 97 необходимо будет немного расширить, чтобы\n","возвращался правильный приоритет для унарных операторов. Унарные\n","операторы должны обладать более высоким приоритетом по сравнению\n","с операциями умножения и деления, но более низким, если сравнивать\n","с операцией возведения в степень.\n","\n","Упражнение 132. Выполнение постфиксных выражений\n","(63 строки)\n","Математические выражения, записанные в постфиксной форме, выпол-\n","нять легче, чем те же выражения в инфиксной, поскольку в них нет скобок\n","и не нужно учитывать старшинство операторов. Выражения в постфикс-\n","ной форме могут быть выполнены при помощи реализации следующего\n","алгоритма.\n","Создаем новый пустой список values\n","Для каждой лексемы в постфиксном выражении\n","Если лексема представляет собой целое число, то\n","Преобразуем лексему в целочисленный тип и добавляем к списку values\n","Если лексема представляет собой унарный оператор –, то\n","Удаляем последний элемент из списка values\n","Применяем операцию логического НЕ к элементу и добавляем результат к списку values\n","Если лексема представляет собой бинарный оператор, то\n","Удаляем последний элемент из списка values и называем его right\n","Удаляем последний элемент из списка values и называем его left\n","Вычисляем результат применения оператора к операндам left и right\n","Добавляем результат к списку values\n","Возвращаем первый элемент списка values в качестве значения выражения\n","Напишите программу, запрашивающую у пользователя математиче-\n","ское выражение в инфиксном виде, преобразующую его в постфиксную\n","форму, выполняющую полученное выражение и выводящую на экран ре-\n","зультат. Используйте при решении задачи свои наработки из упражнений\n","129, 130 и 131, а также алгоритм, приведенный выше.\n","Примечание. В алгоритмах, предложенных для решения упражнений 131 и 132, не\n","предусмотрена обработка возможных ошибок. В результате ваши программы могут\n","выдавать ошибки или выполняться неправильно, если пользователь введет что-то\n","неожиданное. Эти алгоритмы могут быть расширены и дополнены по желанию во\n","избежание возникновения ошибок. Сами ошибки можно корректно обрабатывать\n","и выводить соответствующие сообщения на экран. Если вам интересно попробовать\n","это сделать, никто вас останавливать не будет.\n","Упражнение 133. Содержит ли список подмножество\n","элементов?\n","(44 строки)\n","Подмножеством элементов, или подсписком (sublist), мы будем называть\n","список, являющийся составной частью большего списка. Подсписок мо-\n","жет содержать один элемент, множество элементов, а также быть пустым.\n","\n","Например, [1], [2], [3] и [4] являются подсписками списка [1, 2, 3, 4].\n","Список [2, 3] также входит в состав [1, 2, 3, 4], но при этом список [2, 4]\n","не является подсписком [1, 2, 3, 4], поскольку в исходном списке числа\n","2 и 4 не соседствуют друг с другом. Пустой список может быть рассмотрен\n","как подсписок для любого списка. Таким образом, список [] является под-\n","списком [1, 2, 3, 4]. Также список является подсписком самого себя, то\n","есть [1, 2, 3, 4] – это подсписок для [1, 2, 3, 4] .\n","В рамках данного упражнения вам необходимо написать функцию is-\n","Sublist, определяющую, является ли один список подсписком другого. На\n","вход функции должны поступать два списка – larger и smaller. Функция\n","должна возвращать значение True только в том случае, если список smaller\n","является подсписком списка larger. Напишите также основную програм-\n","му для демонстрации работы функции.\n","Упражнение 134. Все подсписки заданного списка\n","(Решено. 41 строка)\n","Используя определение подсписка из упражнения 133, напишите функ-\n","цию, возвращающую список, содержащий все возможные подсписки за-\n","данного. Например, в число подсписков списка [1, 2, 3] входят следую-\n","щие: [], [1], [2], [3], [1, 2], [2, 3] и [1, 2, 3]. Заметьте, что ваша функция\n","должна вернуть как минимум один пустой список, гарантированно явля-\n","ющийся подсписком для любого списка. Напишите основную программу,\n","демонстрирующую работу функции применительно к нескольким исход-\n","ным спискам.\n","Упражнение 135. Решето Эратосфена\n","(Решено. 33 строки)\n","Решето Эратосфена – алгоритм, изобретенный более 2000 лет назад и слу-\n","жащий для нахождения всех простых чисел от 2 до некоторого целого\n","числа n. Описание этого алгоритма приведено ниже.\n","Выписываем все целые числа от 0 до заданной границы\n","Вычеркиваем 0 и 1 как непростые числа\n","Устанавливаем значение переменной p, равное 2\n","Пока p меньше указанного числа, делать\n","Вычеркиваем все числа, кратные p, но не его само\n","Устанавливаем значение p, равное следующему невычеркнутому числу\n","Выводим все числа, оставшиеся незачеркнутыми\n","Ценность данного алгоритма заключается в том, что на бумаге очень\n","легко вычеркнуть все числа, кратные определенному. Для компьютера\n","это также не самая сложная задача – с этим может прекрасно справиться\n","\n","инструкция for с третьим параметром, переданным функции range. Мы\n","знаем, что вычеркнутые числа на листочке не являются простыми, но\n","физически они никуда с листа не деваются и должны участвовать в даль-\n","нейшем алгоритме. Так что и в компьютерной симуляции не стоит «вы-\n","черкивать» элемент путем его удаления из списка – вместо этого лучше\n","будет присвоить ему значение 0. После завершения алгоритма все нену-\n","левые числа в списке и будут простыми.\n","Напишите программу на Python, реализующую указанный выше алго-\n","ритм для отображения простых чисел в интервале от двух до значения,\n","введенного пользователем. Если алгоритм будет реализован правильно,\n","ваша программа справится с выводом всех простых чисел от двух до мил-\n","лиона всего за пару секунд.\n","Примечание. Приведенный в данном упражнении алгоритм поиска простых чисел,\n","названный в честь Эратосфена, был далеко не единственным вкладом греческого\n","математика в науку. Ему также приписывают вычисление длины окружности Земли\n","и градус наклона ее оси. Кроме того, с 235 г. до н. э. он служил хранителем знамени-\n","той Александрийской библиотеки."],"metadata":{"id":"vOKXIOYEDQSt"}},{"cell_type":"markdown","source":[],"metadata":{"id":"yE9u2NvIDQPw"}},{"cell_type":"markdown","source":[],"metadata":{"id":"AzQIyvW3DQM1"}},{"cell_type":"markdown","source":[],"metadata":{"id":"Ec2NffPsDQJ1"}},{"cell_type":"markdown","source":[],"metadata":{"id":"7xWX-kl6DQHV"}},{"cell_type":"markdown","source":[],"metadata":{"id":"znuhrvEFDQEN"}},{"cell_type":"markdown","source":[],"metadata":{"id":"wlXoxGnbDQBl"}},{"cell_type":"markdown","source":[],"metadata":{"id":"6iEcQjkaDP-t"}},{"cell_type":"markdown","source":[],"metadata":{"id":"59QyxHkNDP8B"}},{"cell_type":"markdown","source":[],"metadata":{"id":"v-fNFtzLDP42"}},{"cell_type":"markdown","source":[],"metadata":{"id":"UN6zQU9rDP1e"}},{"cell_type":"markdown","source":[],"metadata":{"id":"YK_xw1PbDPvG"}},{"cell_type":"markdown","source":[],"metadata":{"id":"iPqAAPdyDPle"}},{"cell_type":"markdown","metadata":{"id":"HwH-foUfsQNc"},"source":["# Задачи с решением"]},{"cell_type":"markdown","metadata":{"id":"3KrXU8tVsQNc"},"source":["1) Создать список из чисел 31, 24, 17 тремя способами: перечисление, на основе другого списка (по сути, создать копию списка), с помощью функции range. Вывести списки на печать. Создать и вывести список, состоящий из полученных списков."]},{"cell_type":"markdown","metadata":{"id":"pDTz47jnsQNc"},"source":["2.1) Создать список из всех симоволов имеющихся во введенной пользователем строке."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"c864d4b4-84b1-4b06-90cf-87d396519f0b","id":"AtDL2_SosQNd"},"outputs":[{"name":"stdout","output_type":"stream","text":["GoodDay\n"]},{"data":{"text/plain":["['G', 'o', 'o', 'd', 'D', 'a', 'y']"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["s = list(input())\n","s\n"]},{"cell_type":"markdown","metadata":{"id":"H3LtTb7isQNd"},"source":["2.2) Создать список из всех слов имеющихся во введенной пользователем строке."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"53ea2809-38aa-4def-ff6c-5b20b3f8f18b","id":"Dzba7H6rsQNd"},"outputs":[{"name":"stdout","output_type":"stream","text":["Good Day\n"]},{"data":{"text/plain":["['Good', 'Day']"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["#Создать список из всех слов имеющихся во введенной пользователем строке.\n","s = input()\n","lst=s.split()\n","lst"]},{"cell_type":"markdown","metadata":{"id":"06Ysjvi0sQNd"},"source":["2.3) Создать и вывести список из всех цифр, встречающихся в заданной строке."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"76951f72-4640-4505-ccf4-1a4fbd6b27e6","id":"TRwOEawzsQNd"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hello1Do2World3\n"]},{"data":{"text/plain":["['1', '2', '3']"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["s = input()\n","lst = []\n","for i in s:\n","    if i.isdigit():\n","        lst.append(i)\n","lst"]},{"cell_type":"markdown","metadata":{"id":"6hhM-BRZsQNe"},"source":["3) Если в заданный список входит слово \"repeat\", а последний элемент - число, то заменить список на столько же копий всех элементов, не считая последних двух (последние два просто добавить). Например, список ['input', 'string', 'repeat', 3] должен быть заменен на ['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3]."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"53b93d2f-ebea-4b70-f64f-6401fb841d07","id":"XfQhba9lsQNe"},"outputs":[{"data":{"text/plain":["['input', 'string', 'input', 'string', 'input', 'string', 'repeat', 3]"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["lst = ['input', 'string','repeat' , 3]\n","if ('repeat' in lst) and (type(lst[len(lst)-1]) == int):\n","    lst1 = lst[:-2]*lst[-1] + lst[-2:]\n","lst1"]},{"cell_type":"markdown","metadata":{"id":"0qYuaF_5sQNe"},"source":["4) Создать список из двух произвольных строк s1 и s2, их длин и результата проверки соблюдения лексикографического порядка (идет ли первая строка раньше второй). В зависимости от параметра output путем обращения к элементам списка выводить либо длины строк (output='lengths', в формате \"Длины строк: 4 и 5\"), либо описание порядка (output='order', в формате \"Строка 'первая' идет ПОСЛЕ строки 'вторая'\")."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"05444b4f-98aa-4523-9c20-b6b47cfa37c3","id":"HRZsEEgksQNe"},"outputs":[{"name":"stdout","output_type":"stream","text":["первая строка= sad\n","вторая строка= good\n","output= order\n","Строка \"sad\" идет ПОСЛЕ строки \"good\"\n"]}],"source":["#HOME\n","s1 = input('первая строка= ')\n","s2 = input('вторая строка= ')\n","lst = [s1, s2, len(s1), len(s2), s1<s2]\n","\n","out = input('output= ')\n","if out == 'lengths':\n","    print('Длины строк: {} и {}'.format(len(s1),len(s2)))\n","elif out=='order':\n","    print('Строка \"{}\" идет {} строки \"{}\"'.format(s1,'ДО' if lst[4] else 'ПОСЛЕ',s2))\n","else:\n","    print('Неизвестная команда')\n"]},{"cell_type":"markdown","metadata":{"id":"2RLlWKWlsQNe"},"source":["5.1) Запросить у пользователя 2 целых числа и сохранить их в переменных max_val, repeat. Создать  список из целых чисел со  значениями от 1 до max_val включительно повторяющийся repeat раз.\n","\n","Например для max_val=4, repeat=4 будет создан список:\n","\n","[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,]"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"8e722a09-9f65-4a79-c857-a12516871a1a","id":"MBbgYRwksQNe"},"outputs":[{"name":"stdout","output_type":"stream","text":["10\n","2\n","[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"]}],"source":["max_val = int(input())\n","repeat = int(input())\n","lst = list(range(1,max_val+1))*repeat\n","print(lst)"]},{"cell_type":"markdown","metadata":{"id":"U9d-UpOPsQNf"},"source":["5.2) На основе списка из 5.1 созданного при max_val = 10 создать его копию (значение repeat заранее неизвестно). В копии с помощью среза удалить 80% элементов из середины. Все элементы исходного списка, которые не сохранены в скопированном списке, умножить на десять."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"b9b89254-1b82-4368-8578-8478994c0940","id":"0la5rWfhsQNf"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n","4\n","[1, 2, 3, 4, 7, 8, 9, 10]  -lst2\n","[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  -lst1\n","[5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6]\n"]}],"source":["max_val=int(input('max_val= '))\n","repeat=int(input('repeat= '))\n","lst=list(range(1,max_val+1))*repeat\n","\n","lst2=list(lst)\n","print(lst2)\n","val=int(repeat*max_val*0.2)\n","print(val)\n","lst2=lst[:val]+lst[-val:]\n","print(lst2,' -lst2')\n","print(lst,' -lst1')\n","print(lst[val:-val]*10)"]},{"cell_type":"markdown","metadata":{"id":"iOFniErBsQNf"},"source":["6) Из произвольной строки создать список. Вместо каждой буквы \"s\" (без учета регистра), стоящей не на первом и не на последнем месте, вставить в список строку из двойного предыдущего символа и одного следующего. Например, из строки \"test\\_Stringss\" должен получиться список ['t', 'e', 'eet', 't', '\\_', '\\__t', 't', 'r', 'i', 'n', 'g', 'ggs', 's']."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"cdd3a3c9-bd43-4058-b391-ba9239330ff3","id":"PUFQbG9-sQNf"},"outputs":[{"name":"stdout","output_type":"stream","text":["произвольная строка= test_Stringss\n","['t', 'e', 'eet', 't', '_', '__t', 't', 'r', 'i', 'n', 'g', 'ggs', 's']\n"]}],"source":["s=input('произвольная строка= ')\n","lst=list(s)\n","for ind,symb in enumerate(s):\n","    if (symb=='s' or symb=='S') and ind!=0 and ind!=-1:\n","        lst[ind]=lst[ind-1]*2+lst[ind+1]\n","print(lst)"]},{"cell_type":"markdown","metadata":{"id":"LoF6O8JKsQNf"},"source":["7)* Организовать заполнение списка заданной длины пользователем через input(). Если на вход подается число (целое или через точку), то записывать в список целое число с округлением вверх. Если \"True\" или \"False\", то как boolean. Иначе - как строку."]},{"cell_type":"markdown","metadata":{"id":"T5P4gKZ6sQNf"},"source":["--------------"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"81240b71-a1e8-42e7-c581-b71e4640fcdb","id":"bbqxHwVBsQNg"},"outputs":[{"name":"stdout","output_type":"stream","text":["5\n","False\n","6.2\n","7\n","True\n","asd\n"]},{"data":{"text/plain":["[False, 7, 7, True, 'asd']"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["i=int(input())\n","lst=[]\n","import math\n","for k in range(i):\n","    l=input()\n","    try:\n","        if l=='True' or l=='False':\n","            if l=='True':\n","                lst.append(True)\n","            else:\n","                lst.append(False)\n","        elif l.isdigit():\n","            lst.append(int(l))\n","        elif type(float(l)) == float:\n","            lst.append(math.ceil(float(l)))\n","    except:\n","        lst.append(l)\n","\n","lst"]},{"cell_type":"markdown","metadata":{"id":"iT2CzTXisQNg"},"source":["8) Заданы две заранее неизвестные строки в которых слова разделены пробелами. Из двух строк составить одну, в котрой слова из первой и второй строки будут чередоваться при этом порядок слов будет сохранен. Для преобразований использовать списки слов.\n","\n","Пример: 'один два три', 'альфа бетта гамма' -> 'один альфа два бетта три гамма'"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"026281f5-3849-4071-b0e5-5ff5737d9fa9","id":"5BbEAHedsQNg"},"outputs":[{"name":"stdout","output_type":"stream","text":["1 2 3\n","q b d\n"]},{"data":{"text/plain":["'1 q 2 b 3 d '"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["lst1=input().split()\n","lst2=input().split()\n","s1=''\n","for i in range(len(lst1)):\n","    s1 += f'{lst1[i]} {lst2[i]} '\n","s1"]},{"cell_type":"markdown","metadata":{"collapsed":true,"id":"cq-mN9s1sQNg"},"source":["9) Решить здачу 8 используя функцию zip."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"8e7dd0dc-2402-42c5-ef8d-55ea15e9765a","id":"rGreIoe6sQNg"},"outputs":[{"name":"stdout","output_type":"stream","text":["1 2 3\n","a b c\n"]},{"data":{"text/plain":["'1 a 2 b 3 c'"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["lst1=input().split()\n","lst2=input().split()\n","lst=list(zip(lst1,lst2))\n","for k, v in enumerate(lst):\n","    lst[k] = ' '.join(v)\n","s = ' '.join(lst)\n","s\n"]},{"cell_type":"markdown","metadata":{"id":"WZNLa0QMsQNg"},"source":["10) Выполнить циклический сдвиг слов в произвольной строке (слова разделены пробелами) на заднное пользователем число слов. Решить с помощью списков слов.\n","\n","Пример \"один два три четыре пять шесть семь\", 3 -> \"четыре пять шесть семь один два три\""]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"12ca9bf4-c8dd-4ddb-f429-8be5f7070467","id":"Omelsrj5sQNg"},"outputs":[{"name":"stdout","output_type":"stream","text":["один два три четыре пять шесть семь\n","3\n"]},{"data":{"text/plain":["'четыре пять шесть семь один два три'"]},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":["lst1 = input().split()\n","ind = int(input())\n","for i in range(ind):\n","    lst1.append(lst1[0])\n","    lst1.remove(lst1[0])\n","' '.join(lst1)"]},{"cell_type":"markdown","metadata":{"id":"J9gCepOfsQNh"},"source":["11) В списке целых чисел из диапозона от 1 до 20 заменить все числа не являющиеся простыми на составляющие их простые множители (которые включаются в виде отдельных элементов списка на место исключаемого числа). Каратные простые множетели добавлять количество раз составляющее их кратность в исходном числе.\n","\n","Пример: [3, 6, 7, 12] -> [3, 2, 3, 7, 2, 2, 3]"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"437a4a74-850f-48a1-e98a-f4a9537f0238","id":"Y30RPf3AsQNh"},"outputs":[{"name":"stdout","output_type":"stream","text":["3 6 7 12\n"]},{"data":{"text/plain":["[3, 2, 3, 7, 2, 2, 3]"]},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":["def pr(x):\n","    f=0\n","    if x==2 or x==3:\n","        f=1\n","    else:\n","        for j in range(2,x//2+1):\n","            if x%j == 0:       #проверка на простое/составное число\n","                break\n","        else:\n","                f=1\n","    return f\n","def pr1(x):\n","    f2=[]\n","    if pr(x)==0:\n","        x_=x                 #в этом куске раскалдываем число на простые\n","        for i in range(2,x//2+1):\n","                if x_!=1:\n","                    if pr(i)==1:\n","                        while x_%i==0:\n","                            x_/=i\n","                            f2.append(i)\n","\n","                else:\n","                    break\n","    else:\n","        f2=[x]\n","    return f2\n","\n","lst1=[]\n","lst=input().split()\n","for i in lst:\n","    lst1 += pr1(int(i))\n","lst1\n"]},{"cell_type":"markdown","metadata":{"id":"kLWs_pnEsQNh"},"source":[" 12) В списке, состоящем из чисел найти значение меньше или равно которому только одно значения из списка."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"f9d16465-52ad-439d-e4f6-5a9beedf1dcd","id":"-5kR0aizsQNh"},"outputs":[{"name":"stdout","output_type":"stream","text":["1 3 5 7\n","3\n"]}],"source":["#Некрасивое решение\n","lst = input().split()\n","for i in range(len(lst)):\n","    lst[i]=int(lst[i])\n","for i in range(len(lst)):\n","    k=0\n","    for j in range(len(lst)):\n","        if (i!=j) and (lst[i]>=lst[j]):\n","            k+=1\n","    if k==1:\n","        print(lst[i])\n","        break"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"db54d79a-38da-4e03-f1f6-d62649682606","id":"jlcJwByksQNh"},"outputs":[{"name":"stdout","output_type":"stream","text":["key = 4 \n","val = 2\n"]}],"source":["#12 И 13\n","lst = [1, 3, 5, 7, 2, 9]\n","min1 = None\n","min2 = None\n","for key, val in enumerate(lst):\n","    if not (min1):\n","        min1 = val\n","        min1_k = key\n","    elif val < min1:\n","        min2 = min1\n","        min2_k = min1_k\n","        min1 = val\n","        min1_l = key\n","    elif not (min2) or val < min2: #TypeError не возникает из-за ленивого сравнения в питоне\n","        min2 = val\n","        min2_k = key\n","\n","print(f'key = {min2_k} \\nval = {min2}')"]},{"cell_type":"markdown","metadata":{"id":"7GRGMVOKsQNh"},"source":["13) Найти индекс в списке для значения, найденного в задаче 12."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"338fab11-d4a0-45ea-b02b-ecff628eadb0","id":"Dow2NijZsQNh"},"outputs":[{"name":"stdout","output_type":"stream","text":["1 3 5 7\n","1\n"]}],"source":["lst=input().split()\n","for i in range(len(lst)):\n","    lst[i]=int(lst[i])\n","for i in range(len(lst)):\n","    k=0\n","    for j in range(len(lst)):\n","        if (i!=j) and (lst[i]>=lst[j]):\n","            k+=1\n","    if k==1:\n","        print(i)\n","        break"]},{"cell_type":"markdown","metadata":{"id":"YPqFgFgksQNi"},"source":["14) Найти индекс второго с конца вхождения значения 1 в список из целых чисел.ь"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"fc4a9c79-e1fb-4e51-e08b-e980112486d4","id":"PKw-yztLsQNi"},"outputs":[{"name":"stdout","output_type":"stream","text":["3 5 6 2 6 3 1 54 4 1 43\n"]},{"data":{"text/plain":["6"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["lst = input().split()\n","k = 0\n","i = len(lst)-1\n","while (k<2) and (i>=0):\n","    if lst[i]=='1':\n","        k+=1\n","    i-=1\n","i+1\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FLh3JelMsQNi"},"outputs":[],"source":["lst()"]},{"cell_type":"markdown","metadata":{"id":"YRcsLeRSsQNi"},"source":["15) Реализовать функцию умножения двух матриц, записанных как список списков. Проверить на умножении матрицы на единичную матрицу."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"96a1bcb2-a812-44d0-9a17-264b2a3bdf82","id":"F0L_m4QzsQNi"},"outputs":[{"name":"stdout","output_type":"stream","text":["кол-во строк 1 матрицы= 2\n","кол-во столбцов 1 матрицы= 2\n","введите 1 строку: 3 2\n","введите 2 строку: 2 4\n","кол-во строк 2 матрицы= 2\n","кол-во столбцов 2 матрицы= 2\n","введите 1 строку: 3 4\n","введите 2 строку: 5 6\n","19 24\n","26 32\n"]}],"source":["#УМНОЖЕНИЯ МАТРИЦ С ВВОДОМ ДАННЫХ ПОЛЬЗОВАТЕЛЕМ ВРУЧНУЮ 2.0\n","def f(n,m):\n","    c=0\n","    for i in range(0,i12):\n","         c+=m1[n][i]*m2[i][m]\n","    return c\n","i11=int(input('кол-во строк 1 матрицы= '))\n","i21=int(input('кол-во столбцов 1 матрицы= '))\n","m1=[]\n","m2=[]\n","for k in range(0,i11):\n","    s=input('введите {} строку: '.format(k+1)).split()\n","    for x_ in range(0,i21):\n","        s[x_]=int(s[x_])\n","    m1.append(s)\n","i12=int(input('кол-во строк 2 матрицы = '))\n","i22=int(input('кол-во столбцов 2 матрицы = '))\n","if i21!=i12: #если кол-во столбцов первой матрицы не равно кол-ву строк второй матрицы\n","    print('матрицы невозможно умножить')\n","    quit()\n","for k in range(0,i21):\n","    s=input('введите {} строку: '.format(k+1)).split()\n","    for j in range(0,i22):\n","        s[j] = int(s[j])\n","    m2.append(s)\n","m3=[]\n","for i in range(0,i11):\n","    m3.append([])\n","    for j in range(0,i22):\n","        m3[i].append(f(i,j))\n","for k, v in enumerate(m3):\n","    m3[k] = ' '.join([str(i) for i in v])\n","s = '\\n'.join(m3)\n","print(s)"]},{"cell_type":"markdown","metadata":{"id":"46n4rEcIsQNi"},"source":["16) Создать копию матрицы, записанной в виде вложенных списков, так что при изменении элементов исходной матрицы, скопированная матрица меняться не будет."]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"90abf6b4-f26b-4744-fe68-0db4f8166a98","id":"7u-UsvHfsQNi"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[0, 1, 2], [0, 1, 3], [2, 3, 4]]  -исходная\n","[[0, 1, 2], [0, 1, 3], [2, 3, 4]]  -копия\n","[[1000, 1, 2], [0, 1, 3], [2, 3, 4]]  -исходная [[0, 1, 2], [0, 1, 3], [2, 3, 4]]  -копия\n"]}],"source":["import copy\n","lst=[[0,1,2],[0,1,3],[2,3,4]]\n","print(lst,' -исходная')\n","lst2=copy.deepcopy(lst)\n","print(lst2,' -копия')\n","lst[0][0]=1000\n","print(lst,' -исходная',lst2,' -копия')"]},{"cell_type":"markdown","metadata":{"id":"ePi8HUHUsQNj"},"source":["17) Осортировать слова в строке (с пробелом в качестве разделителя) в лексикографическом порядке.\n","\n","Пример: 'дыня абрикос яблоко арбуз' -> 'абрикос арбуз дыня яблоко'"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"b613b489-3453-49b1-c1a3-47179b6f2ce9","id":"NAYEIgUAsQNj"},"outputs":[{"name":"stdout","output_type":"stream","text":["дыня абрикос яблоко арбуз\n"]},{"data":{"text/plain":["'абрикос арбуз дыня яблоко'"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["lst=input().split(' ')\n","lst.sort()\n","' '.join(lst)"]},{"cell_type":"markdown","metadata":{"id":"JHCFnsAOsQNj"},"source":["18) Имеется переменная lsls содержащая список списков. Заранее неизвестно, сколько в переменной списков и какой они длины (их длины в общем случае различны). Из этих списков составить список, содержащий поорчедно элементы каждого из вложенных списков, при этом, порядок этих элементов сохраняется. Процедура создания списка останавливается когда хотя бы в одном из исходных вложенных списков будут использованные все элементы. Кроме составленного списка получить список из всех элементов не вошедших в составленный список.\n","\n","Пример: lsls=[[1,2,3],['a', 'b'], [30, 40, 50, 60]] -> [1, 'a', 30, 2, 'b', 40], [3, 50, 60]"]},{"cell_type":"code","execution_count":null,"metadata":{"outputId":"15d4ae3e-1209-422c-f442-99b5ac6a4f47","id":"V1q0iYEgsQNj"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1, 'a', 30, 2, 'b', 40] [3, 50, 60]\n"]}],"source":["lsls=[[1,2,3],['a', 'b'], [30, 40, 50, 60]]\n","lst=[]\n","lst2=[]\n","for i in range(0,len(lsls)):\n","    lst.append(len(lsls[i]))\n","k = min(lst)\n","for i in range(k):\n","    for j in range(0,len(lsls)):\n","        lst2.append(lsls[j][i])\n","        lsls[j][i]= None\n","lst=[]\n","for i in range(len(lsls)):\n","    for j in range(len(lsls[i])):\n","        if lsls[i][j]!=None:\n","            lst.append(lsls[i][j])\n","print(lst2,lst)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"dd3LqjIcsQNj"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"provenance":[{"file_id":"14FyE54zDsaug3Iq1LCjYunUgtWnwz67S","timestamp":1728044986869}]}},"nbformat":4,"nbformat_minor":0}