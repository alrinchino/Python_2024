{"cells":[{"cell_type":"markdown","metadata":{"id":"xUzA8oT8g8Da"},"source":["# Цикл for\n","\n"]},{"cell_type":"markdown","source":["Цикл for, также называемый циклом с параметром, в языке Питон богат возможностями. В цикле for указывается переменная и множество значений, по которому будет пробегать переменная. Множество значений может быть задано списком, кортежем, строкой или диапазоном.\n","\n","Вот простейший пример использования цикла, где в качестве множества значений используется кортеж:"],"metadata":{"id":"o6qE82Z8aowW"}},{"cell_type":"code","source":["i = 1\n","for color in 'red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet':\n","    print('#', i, ' color of rainbow is ', color, sep = '')\n","    i += 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n7FiDmnrau4f","executionInfo":{"status":"ok","timestamp":1728060295316,"user_tz":-180,"elapsed":303,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"bdbce67e-9e7f-4cf3-fa5f-5e79fd61688b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["#1 color of rainbow is red\n","#2 color of rainbow is orange\n","#3 color of rainbow is yellow\n","#4 color of rainbow is green\n","#5 color of rainbow is cyan\n","#6 color of rainbow is blue\n","#7 color of rainbow is violet\n"]}]},{"cell_type":"markdown","source":["В этом примере переменная color последовательно принимает значения 'red', 'orange' и т.д. В теле цикла выводится сообщение, которое содержит название цвета, то есть значение переменной color, а также номер итерации цикла  число, которое сначала равно 1, а потом увеличивается на один (инструкцией i += 1 с каждым проходом цикла.\n","\n","Инструкция i += 1 эквивалентна конструкции i = i + 1 (это просто сокращенная запись). Такую сокращенную запись можно использовать для всех арифметических операций: *=, -=, /=, %=...\n","\n","В списке значений могут быть выражения различных типов, например:"],"metadata":{"id":"FZXR_32pa3vB"}},{"cell_type":"code","source":["for i in 1, 2, 3, 'one', 'two', 'three':\n","    print(i)"],"metadata":{"id":"lUUHztbMa-A1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["При первых трех итерациях цикла переменная i будет принимать значение типа int, при последующих трех — типа str."],"metadata":{"id":"iuhQ4torbCU0"}},{"cell_type":"markdown","source":["### 2. Функция range\n","Как правило, циклы for используются либо для повторения какой-либо последовательности действий заданное число раз, либо для изменения значения переменной в цикле от некоторого начального значения до некоторого конечного.\n","\n","Для повторения цикла некоторое заданное число раз n можно использовать цикл for вместе с функцией range:"],"metadata":{"id":"ZHY1N1JubI-d"}},{"cell_type":"code","source":["for i in range(10):  # равносильно инструкции for i in 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:\n","    # здесь можно выполнять циклические действия\n","    print(i, i ** 2)\n","# цикл закончился, поскольку закончился блок с отступом\n","print('Конец цикла')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wEsvy-eVbQp9","executionInfo":{"status":"ok","timestamp":1728060427177,"user_tz":-180,"elapsed":310,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"7226be7c-03bc-4d23-fc96-478661866055"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 0\n","1 1\n","2 4\n","3 9\n","Конец цикла\n"]}]},{"cell_type":"markdown","source":["В качестве n может использоваться числовая константа, переменная или произвольное арифметическое выражение (например, 2 ** 10). Если значение n равно нулю или отрицательное, то тело цикла не выполнится ни разу.\n","\n","Функция range может также принимать не один, а два параметра. Вызов range(a, b) означает, что индексная переменная будеть принимать значения от a до b - 1, то есть первый параметр функции range, вызываемой с двумя параметрами, задает начальное значение индексной переменной, а второй параметр — первое значение, которое индексная переменная принимать не будет. Если же a≥b, то цикл не будет выполнен ни разу. Например, для того, чтобы просуммировать значения чисел от 1 до n можно воспользоваться следующей программой:"],"metadata":{"id":"cJ9xCJKHbnp0"}},{"cell_type":"code","source":["sum = 0\n","n = 5\n","for i in range(1, n + 1):\n","    sum += i\n","print(sum)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JB1IWXk2brdu","executionInfo":{"status":"ok","timestamp":1728060507687,"user_tz":-180,"elapsed":343,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"d4638791-ccaf-4fd2-f466-aca45384f299"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15\n"]}]},{"cell_type":"markdown","source":["В этом примере переменная i принимает значения 1, 2, ..., n, и значение переменной sum последовательно увеличивается на указанные значения.\n","\n","Наконец, чтобы организовать цикл, в котором индексная переменная будет уменьшаться, необходимо использовать функцию range с тремя параметрами. Первый параметр задает начальное значение индексной переменной, второй параметр — значение, до которого будет изменяться индексная переменная (не включая его!), а третий параметр — величину изменения индексной переменной. Например, сделать цикл по всем нечетным числам от 1 до 99 можно при помощи функции range(1, 100, 2), а сделать цикл по всем числам от 100 до 1 можно при помощи range(100, 0, -1).\n","\n","Более формально, цикл for i in range(a, b, d) при d > 0 задает значения индексной переменной i = a, i = a + d, i = a + 2 * d и так для всех значений, для которых i < b. Если же d < 0, то переменная цикла принимает все значения i > b."],"metadata":{"id":"9woCaEEmbx0N"}},{"cell_type":"markdown","source":["Примеры"],"metadata":{"id":"4Q3Y9dSaUSGn"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"NlNTeo9Xg8Dc","outputId":"c38a6c1d-e495-4444-9594-ec5ca2c581de"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hello, Alice\n","Hello, Bob\n","Hello, Charley\n","\n","Hello, Alice\n","Hello, Bob\n","Hello, Charley\n","\n","Hello, Alice\n","Hello, Bob\n","Hello, Charley\n"]}],"source":["NameList = ['Alice', 'Bob', 'Charley']\n","\n","for name in NameList: # Перебираем элементы списка\n","\n","    print('Hello, ' + name)\n","\n","print()\n","\n","for i in range(len(NameList)): # Перебираем индексы от 0 до L-1\n","\n","    print('Hello, ' + NameList[i])\n","\n","print()\n","\n","for i, name in enumerate(NameList): # Перебираем пары индекс-элемент\n","\n","    print('Hello, ' + NameList[i])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EGfBdlpFg8Dd","outputId":"adc13b48-239b-43ba-9228-75b96715fb14"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hello, Alice\n","Hello, Bob\n"]}],"source":["#break\n","#Поздороваемся только с двумя людьми\n","\n","NameList = ['Alice', 'Bob', 'Charley']\n","\n","for i in range(len(NameList)):\n","\n","    print('Hello, ' + NameList[i])\n","\n","    if i > 0:\n","\n","        break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3z1oTlrCg8Dd","outputId":"cab8369f-af25-4f94-9025-794c85e7525e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hello, Alice\n","Hello, Charley\n"]}],"source":["#continue\n","#Не будем здороваться с Бобом\n","\n","NameList = ['Alice', 'Bob', 'Charley']\n","\n","for name in NameList: # Перебираем элементы списка\n","\n","    if name == 'Bob':\n","\n","        continue\n","\n","    print('Hello, ' + name)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"chIpK0XEg8Dd","outputId":"4616c6f1-7a82-46a7-ab12-3791b3c63e0a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Не нашли пятёрку\n"]}],"source":["# Конструкция for..else\n","\n","numbers = [1, 3, 7, 8, 10]\n","\n","for n in numbers:\n","\n","    if n == 5:\n","\n","        print('Нашли пятёрку')\n","        break\n","\n","else: # если break не сработал\n","\n","    print('Не нашли пятёрку')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"xmcrDyWkg8Dd"},"outputs":[],"source":["#pass - ничего не делает\n","for n in (1, 2, 3):\n","    pass"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tlaTiIO8g8Dd","outputId":"1a54fa67-19b6-47d6-ec79-20c0309dda23"},"outputs":[{"ename":"SyntaxError","evalue":"unexpected EOF while parsing (<ipython-input-40-b90b10cfe39b>, line 2)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-40-b90b10cfe39b>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    for n in (1,2,3):\u001b[0m\n\u001b[0m                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unexpected EOF while parsing\n"]}],"source":["#Для чего нужен pass:\n","for n in (1, 2, 3):\n"]},{"cell_type":"markdown","source":["## Задачи"],"metadata":{"id":"T5y7fV8mUlM1"}},{"cell_type":"markdown","source":["Даны два целых числа A и B (при этом A ≤ B). Выведите все числа от A до B включительно."],"metadata":{"id":"kh440rlmUp6t"}},{"cell_type":"markdown","source":["Даны два целых числа A и В. Выведите все числа от A до B включительно, в порядке возрастания, если A < B, или в порядке убывания в противном случае."],"metadata":{"id":"pZj-Gv7CUtiu"}},{"cell_type":"markdown","source":["Даны два целых числа A и В, A>B\n",". Выведите все нечётные числа от A до B включительно, в порядке убывания. В этой задаче можно обойтись без инструкции if."],"metadata":{"id":"IrbfgRJhUvF-"}},{"cell_type":"markdown","source":["Дано 10 целых чисел. Вычислите их сумму. Напишите программу, использующую наименьшее число переменных."],"metadata":{"id":"UyDBmhtvUyM9"}},{"cell_type":"markdown","source":["Дано несколько чисел. Вычислите их сумму. Сначала вводите количество чисел N, затем вводится ровно N целых чисел. Какое наименьшее число переменных нужно для решения этой задачи?"],"metadata":{"id":"eBfm67hhU0zO"}},{"cell_type":"markdown","source":["По данному натуральному n вычислите сумму $1^3+2^3+3^3+...+n^3$."],"metadata":{"id":"D4eQNAGjU3jV"}},{"cell_type":"markdown","source":["Факториалом числа $n$ называется произведение $1 × 2 × ... × n$. Обозначение: $n!$\n","\n","По данному натуральному $n$ вычислите значение $n!$\n","\n","Пользоваться математической библиотекой math в этой задаче запрещено."],"metadata":{"id":"yghHx6_yVBzl"}},{"cell_type":"markdown","source":["По данному натуральном $n$ вычислите сумму $1!+2!+3!+...+n!$\n","\n","В решении этой задачи можно использовать только один цикл. Пользоваться математической библиотекой math в этой задаче запрещено."],"metadata":{"id":"CNA5ntQFVTZ8"}},{"cell_type":"markdown","source":["Дано N чисел: сначала вводится число N, затем вводится ровно N целых чисел. Подсчитайте количество нулей среди введенных чисел и выведите это количество. Вам нужно подсчитать количество чисел, равных нулю, а не количество цифр."],"metadata":{"id":"tNxhnMXhVbEm"}},{"cell_type":"markdown","source":["По данному натуральному n ≤ 9 выведите лесенку из n ступенек, i-я ступенька состоит из чисел от 1 до i без пробелов."],"metadata":{"id":"djEr5lhoVcFm"}},{"cell_type":"markdown","source":["Для настольной игры используются карточки с номерами от 1 до N. Одна карточка потерялась. Найдите ее, зная номера оставшихся карточек.\n","Дано число N, далее N − 1 номер оставшихся карточек (различные числа от 1 до N). Программа должна вывести номер потерянной карточки.\n","\n","Массивами и аналогичными структурами данных пользоваться нельзя."],"metadata":{"id":"3p37Ewp7VexM"}},{"cell_type":"markdown","metadata":{"id":"Br4n_NV-g8DY"},"source":["# Цикл while\n"]},{"cell_type":"markdown","source":["Цикл while (“пока”) позволяет выполнить одну и ту же последовательность действий, пока проверяемое условие истинно. Условие записывается до тела цикла и проверяется до выполнения тела цикла. Как правило, цикл while используется, когда невозможно определить точное значение количества проходов исполнения цикла.\n","\n","Синтаксис цикла while в простейшем случае выглядит так:"],"metadata":{"id":"_ICsD-yxVtXd"}},{"cell_type":"code","source":["while условие:\n","    блок инструкци"],"metadata":{"id":"X_m9S3MUVwD8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["При выполнении цикла while сначала проверяется условие. Если оно ложно, то выполнение цикла прекращается и управление передается на следующую инструкцию после тела цикла while. Если условие истинно, то выполняется инструкция, после чего условие проверяется снова и снова выполняется инструкция. Так продолжается до тех пор, пока условие будет истинно. Как только условие станет ложно, работа цикла завершится и управление передастся следующей инструкции после цикла.\n","\n","Например, следующий фрагмент программы напечатает на экран квадраты всех целых чисел от 1 до 10. Видно, что цикл while может заменять цикл for ... in range(...):"],"metadata":{"id":"GbDnpzLcVzRk"}},{"cell_type":"code","source":["i = 1\n","while i <= 10:\n","    print(i ** 2)\n","    i += 1"],"metadata":{"id":"HSWZNS5rV2cU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["В этом примере переменная i внутри цикла изменяется от 1 до 10. Такая переменная, значение которой меняется с каждым новым проходом цикла, называется счетчиком. Заметим, что после выполнения этого фрагмента значение переменной i будет равно 11, поскольку именно при i == 11 условие i <= 10 впервые перестанет выполняться.\n","\n","Вот еще один пример использования цикла while для определения количества цифр натурального числа n:"],"metadata":{"id":"vMsRkK84V5RE"}},{"cell_type":"code","source":["n = int(input())\n","length = 0\n","while n > 0:\n","    n //= 10  # это эквивалентно n = n // 10\n","    length += 1\n","print(length)"],"metadata":{"id":"MhouQPPiV-ip"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["В этом цикле мы отбрасываем по одной цифре числа, начиная с конца, что эквивалентно целочисленному делению на 10 (n //= 10), при этом считаем в переменной length, сколько раз это было сделано.\n","\n","В языке Питон есть и другой способ решения этой задачи: length = len(str(i))."],"metadata":{"id":"lilr3LLRWBUj"}},{"cell_type":"markdown","source":["После тела цикла можно написать слово else: и после него блок операций, который будет выполнен один раз после окончания цикла, когда проверяемое условие станет неверно:"],"metadata":{"id":"fH-flSfmWFJ7"}},{"cell_type":"code","source":["i = 1\n","while i <= 10:\n","    print(i)\n","    i += 1\n","else:\n","    print('Цикл окончен, i =', i)"],"metadata":{"id":"QDksvGKnWHvw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Казалось бы, никакого смысла в этом нет, ведь эту же инструкцию можно просто написать после окончания цикла. Смысл появляется только вместе с инструкцией break. Если во время выполнения Питон встречает инструкцию break внутри цикла, то он сразу же прекращает выполнение этого цикла и выходит из него. При этом ветка else исполняться не будет. Разумеется, инструкцию break осмыленно вызывать только внутри инструкции if, то есть она должна выполняться только при выполнении какого-то особенного условия.\n","\n","Приведем пример программы, которая считывает числа до тех пор, пока не встретит отрицательное число. При появлении отрицательного числа программа завершается. В первом варианте последовательность чисел завершается числом 0 (при считывании которого надо остановиться)."],"metadata":{"id":"w9JznZhVWKXX"}},{"cell_type":"code","source":["a = int(input())\n","while a != 0:\n","    if a < 0:\n","        print('Встретилось отрицательное число', a)\n","        break\n","    a = int(input())\n","else:\n","    print('Ни одного отрицательного числа не встретилось'"],"metadata":{"id":"4qNmIUNpWN21"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Во втором варианте программы сначала на вход подается количество элементов последовательности, а затем и сами элементы. В таком случае удобно воспользоваться циклом for. Цикл for также может иметь ветку else и содержать инструкции break внутри себя."],"metadata":{"id":"TYy6gYzGWPBt"}},{"cell_type":"code","source":["n = int(input())\n","for i in range(n):\n","    a = int(input())\n","    if a < 0:\n","        print('Встретилось отрицательное число', a)\n","        break\n","else:\n","    print('Ни одного отрицательного числа не встретилось'"],"metadata":{"id":"saaxA0EzWS1E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Другая инструкция управления циклом — continue (продолжение цикла). Если эта инструкция встречается где-то посередине цикла, то пропускаются все оставшиеся инструкции до конца цикла, и исполнение цикла продолжается со следующей итерации."],"metadata":{"id":"L0nDN5l3WVhU"}},{"cell_type":"markdown","source":["Если инструкции break и continue содержатся внутри нескольких вложенных циклов, то они влияют лишь на исполнение самого внутреннего цикла. Вот не самый интеллектуальный пример, который это демонстрирует:"],"metadata":{"id":"M7gSgt-QWO41"}},{"cell_type":"code","source":["for i in range(3):\n","    for j in range(5):\n","        if j > i:\n","            break\n","        print(i, j)"],"metadata":{"id":"kT6sZjugWbSE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Увлечение инструкциями break и continue не поощряется, если можно обойтись без их использования. Вот типичный пример плохого использования инструкции break (данный код считает количество знаков в числе)."],"metadata":{"id":"W0dSncHxWd0k"}},{"cell_type":"code","source":["n = int(input())\n","length = 0\n","while True:\n","    length += 1\n","    n //= 10\n","    if n == 0:\n","        break\n","print('Длина числа равна', length)"],"metadata":{"id":"eAvdacUSWhGL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Гораздо лучше переписать этот цикл так:"],"metadata":{"id":"yTTX303fWjGE"}},{"cell_type":"code","source":["n = int(input())\n","length = 0\n","while n != 0:\n","    length += 1\n","    n //= 10\n","print('Длина числа равна', length"],"metadata":{"id":"sZeqD2-MWnTM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Впрочем, на Питоне можно предложить и более изящное решение:"],"metadata":{"id":"c0zYGlmTWokW"}},{"cell_type":"code","source":["n = int(input())\n","print('Длина числа равна', len(str(n)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sabQJ2SkWtF3","executionInfo":{"status":"ok","timestamp":1728109563295,"user_tz":-180,"elapsed":20674,"user":{"displayName":"Андрей Ринчино","userId":"04004688211480853097"}},"outputId":"fe9bbca2-db6d-4933-d3fc-4f90955f8def"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","Длина числа равна 2\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"qjNV9vvfWocs"}},{"cell_type":"markdown","source":[],"metadata":{"id":"pXTHN_COWoUN"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"LNijHEBDg8DZ","outputId":"a95ea5fd-2368-450d-e0d3-2a3a5d0b8862"},"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","Hello! \n","2\n","Hello! Hello! \n","3\n","Hello! Hello! Hello! \n"]}],"source":["greetings = 1\n","\n","while greetings <= 3:\n","\n","    print(greetings)\n","    print('Hello! ' * greetings)\n","    # Оператор += увеличивает переменную на заданное число\n","    greetings += 1 # эквивалентно: greetings = greetings + 1"]},{"cell_type":"markdown","metadata":{"id":"xjkiv_OBg8DZ"},"source":["break"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IzK-uuo5g8DZ","outputId":"dff9003d-b89a-4f8b-d47b-0431862a930b"},"outputs":[{"name":"stdout","output_type":"stream","text":["5050\n"]}],"source":["i = 0\n","k = 5\n","\n","S = 0 # Сумма первых 100 чисел\n","\n","while True:\n","\n","    i += 1\n","    S += i\n","\n","    if not i < 100: break\n","\n","\n","print(S)"]},{"cell_type":"markdown","metadata":{"id":"Cnag08Ghg8DZ"},"source":["continue"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ch_CdrR1g8DZ","outputId":"7d6aadce-565c-4a07-944b-7f8d38312d30"},"outputs":[{"name":"stdout","output_type":"stream","text":["4000\n"]}],"source":["i = 0\n","k = 5\n","\n","S = 0 # Сумма первых 100 чисел не кратных k\n","\n","while i < 100:\n","\n","    i += 1\n","\n","    if not i % k:\n","        continue\n","\n","    S += i\n","\n","\n","print(S)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjWf5PwQg8Da","outputId":"1f77e8ed-d415-46c8-e28c-b534601fee73"},"outputs":[{"name":"stdout","output_type":"stream","text":["Нашли пятёрку\n"]}],"source":["# Конструкция while..else\n","\n","numbers = [1, 3, 7, 8, 10, 5]\n","i = 0\n","\n","while i < len(numbers):\n","\n","    if numbers[i] == 5:\n","\n","        print('Нашли пятёрку')\n","        break\n","\n","    i += 1\n","\n","else: # если break не сработал\n","\n","    print('Не нашли пятёрку')\n"]},{"cell_type":"markdown","metadata":{"id":"bho6uAA4g8Da"},"source":["В Python условия и циклы не создают своих областей видимости!"]},{"cell_type":"markdown","source":["## Задачи"],"metadata":{"id":"_cGVQBP8b-IO"}},{"cell_type":"markdown","source":["По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, в порядке возрастания."],"metadata":{"id":"knlLiCqhavcV"}},{"cell_type":"markdown","source":["Дано целое число, не меньшее 2. Выведите его наименьший натуральный делитель, отличный от 1."],"metadata":{"id":"q2Q388PVawul"}},{"cell_type":"markdown","source":["По данному натуральному числу N найдите наибольшую целую степень двойки, не превосходящую N. Выведите показатель степени и саму степень."],"metadata":{"id":"hyYCpb5wa0FD"}},{"cell_type":"markdown","source":["В первый день спортсмен пробежал x километров, а затем он каждый день увеличивал пробег на 10% от предыдущего значения. По данному числу y определите номер дня, на который пробег спортсмена составит не менее y километров.\n","\n","Программа получает на вход действительные числа x и y и должна вывести одно натуральное число."],"metadata":{"id":"9WIrHOpHa3qs"}},{"cell_type":"markdown","source":["Программа получает на вход последовательность целых неотрицательных чисел, каждое число записано в отдельной строке. Последовательность завершается числом 0, при считывании которого программа должна закончить свою работу и вывести количество членов последовательности (не считая завершающего числа 0). Числа, следующие за числом 0, считывать не нужно."],"metadata":{"id":"HfwBOfM-a6_L"}},{"cell_type":"markdown","source":["Определите сумму всех элементов последовательности, завершающейся числом 0. В этой и во всех следующих задачах числа, следующие за первым нулем, учитывать не нужно."],"metadata":{"id":"A0uYZfI9a9zd"}},{"cell_type":"markdown","metadata":{"id":"u8-6fpoOgL7O"},"source":["1) С помощью цикла for сравнить две произвольные строки и вывести строку, состоящую из общих символов исходных строк."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FE_Y6DhegL7O","outputId":"7fb70534-d54a-42b5-d27c-de42c481dd5c"},"outputs":[{"name":"stdout","output_type":"stream","text":["1222333444555\n","1222345\n"]},{"data":{"text/plain":["'1222333444555'"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["#дублирование допустимо\n","s1 = input()\n","s2 = input()\n","s = ''\n","for i in s1:\n","    if i in s2:\n","        s += i\n","s"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oMfIUTLjgL7Q","outputId":"3e0966bc-77cd-4ec1-8c22-1f35a900c206"},"outputs":[{"name":"stdout","output_type":"stream","text":["1222333444555\n","1222345\n"]},{"data":{"text/plain":["'12345'"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["#дублирование недопустимо\n","s1 = input()\n","s2 = input()\n","s = ''\n","for i in s1:\n","    if (i in s2) and (i not in s):\n","        s += i\n","s"]},{"cell_type":"markdown","metadata":{"id":"R2vCZ8oDgL7Q"},"source":["2) С помощью цикла while ассчитать двойной факториал для произвольного числа. Двойной факториал *n!!* числа n рассчитывается как произведение всех чисел, меньших исходного на числа, кратные двум (вплоть до 1 или 2). Например: 7!! = 7 \\* 5 \\* 3 \\* 1 = 105"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3giEjVCQgL7R","outputId":"97edec54-26c1-4049-b697-4f99a14cf961"},"outputs":[{"name":"stdout","output_type":"stream","text":["7\n"]},{"data":{"text/plain":["105"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["x = int(input())\n","s = 1\n","while x > 0:\n","    s *= x\n","    x -= 2\n","s"]},{"cell_type":"markdown","metadata":{"id":"8t7gsCiPgL7R"},"source":["3) Решить предыдущую задачу с помощью цикла for."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-g6YWlwfgL7S","outputId":"581c2f22-de6d-4c5c-cd85-b31a77f36231"},"outputs":[{"name":"stdout","output_type":"stream","text":["7\n"]},{"data":{"text/plain":["105"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["x = int(input())\n","s1 = 1\n","for x in range(x, 0, -2):\n","    s1 *= x\n","s1"]},{"cell_type":"markdown","metadata":{"id":"Konj4Y1CgL7S"},"source":["4) Вывести все простые числа в произвольном интервале [a, b], используя вложенные for и конструкцию for-else."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F7l6rhwggL7S","outputId":"dab1c0f6-b649-455e-e054-8a181548dc7e"},"outputs":[{"name":"stdout","output_type":"stream","text":["a = 5\n","b = 20\n","5\n","7\n","11\n","13\n","17\n","19\n"]}],"source":["#Неэффективный способ\n","a = int(input('a = '))\n","b = int(input('b = '))\n","for i in range(a, b+1):\n","    for j in range(2, i//2):\n","        if i%j == 0:\n","            break\n","    else:\n","        print(i)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sxiccq8sgL7T","outputId":"24cb5acd-d54e-491d-9c5e-8039dd7d0d63"},"outputs":[{"name":"stdout","output_type":"stream","text":["a = 6\n","b = 20\n","[7, 11, 13, 17, 19]\n"]}],"source":["#решето эратосфена\n","a = int(input('a = '))\n","b = int(input('b = '))\n","lst = list(range(a,b+1))\n","for i in range(2,b+1):\n","    j = i\n","    while j + i <= b:\n","        j += i\n","        if j in lst:\n","            lst.remove(j)\n","print(lst)"]},{"cell_type":"markdown","metadata":{"id":"6jKBVaqHgL7T"},"source":["5) Реализовать проверку на ввод вводимого пользователем значения: предлагать ввод до тех пор, пока не будет введена непустая строка. Если введено STOP, выводить сообщение \"Program interrupted by user\". Если введенная строка в лексиграфическом порядке стоит перед строчными латинскими символами, выводить предупреждение \"Too early in the dictionary. Try again!\" и предлагать ввод снова. Иначе выводить отформатированную исходную строку с заполнителем \"_\" и шириной 30 символов с выравниванием посередине."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PIlLWdBMgL7T","outputId":"513ebf11-2f72-466d-cadb-26b7de8d802d"},"outputs":[{"name":"stdout","output_type":"stream","text":["333\n","Too early in the dictionary. Try again!\n","qwe\n","_____________qwe______________\n","ASS\n","Too early in the dictionary. Try again!\n","STOP\n","Program interrupted by user\n"]}],"source":["s = ' '\n","while s != '':\n","    s = input()\n","    if s == 'STOP':\n","        print('Program interrupted by user')\n","        break\n","    elif s < 'a':\n","        print(\"Too early in the dictionary. Try again!\")\n","        continue\n","    else:\n","        print('{:_^30s}'.format(s))\n","        continue"]},{"cell_type":"markdown","metadata":{"id":"jGPHU-x8gL7T"},"source":["6) Для произвольной строки вывести те символы, номера которых в строке (не индексы!) делят длину строки без остатка. Для строки \"Hello world!\" должно выводиться \"Hell !\"."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kszvecsEgL7U","outputId":"15b7c415-12c6-4e53-d2a7-fbbcffb5d8be","collapsed":true},"outputs":[{"name":"stdout","output_type":"stream","text":["123\n"]},{"data":{"text/plain":["'13'"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["s1 = ''\n","s = input()\n","for ind, symb in enumerate(s, 1):\n","    if not (len(s) % ind):\n","        s1+=symb\n","s1"]},{"cell_type":"markdown","metadata":{"id":"kuVvG12igL7U"},"source":["7) Даны две произвольные строки. Для всех символов первой строки, которые встречаются во второй строке (без учета регистра), вывести строку: \"<номер\\_символа\\_в\\_первой\\_строке> встречается в строке поиска: <второе_слово>\", причем второе слово выводить в нижнем регистре с найденным символом в верхнем регистре. Например, для исходной строки \"Hello world!\" и строки поиска 'HERD' третья строка в выводе будет содержать текст:<br> \"9 символ встречается в строке поиска: heRd\"."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PC6vyEsugL7U","outputId":"9b92a0ba-3032-4b3d-d185-bebb7acd366f","collapsed":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Hello world!\n","HERD\n","1 символ встречается в строке поиска:Herd\n","2 символ встречается в строке поиска:hErd\n","9 символ встречается в строке поиска:heRd\n","11 символ встречается в строке поиска:herD\n"]}],"source":["s1 = input()\n","s2 = input()\n","s2 = s2.lower()\n","s1 = s1.lower()\n","for ind, symb in enumerate(s1, 1):\n","    if symb in s2:\n","        i = s2.find(symb)\n","        new_s = s2[0:i]+symb.upper()+s2[i+1:len(s2)]\n","        print(\"{} символ встречается в строке поиска:{}\".format(ind, new_s))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e3Z3TxWcgL7U"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"provenance":[{"file_id":"10JyHVT-8mFzno2zWe_w8bMXwKjbh3IRm","timestamp":1728044921129}]}},"nbformat":4,"nbformat_minor":0}